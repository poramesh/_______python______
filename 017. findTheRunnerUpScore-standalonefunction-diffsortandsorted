Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. 
You are given n scores. Store them in a list and find the score of the runner-up.

Input Format

The first line contains n. The second line contains an array A[] of n integers each separated by a space.

Constraint

2<=n <=10
-100<=A[i]<=100

Ouput Format
print the runner-up score.

Sample Input 
5
2 3 6 6 5
Sample Output 
5
Explanation 
Given list is [2,3,4,6,6,5]. The maximum score is 6 , second maximum is 5. Hence, we print  as the runner-up score.

Solution: 

n = int(input())
arr = list(set(map(int, input().split())))
arr.sort()
print(arr[-2]) //negative indices are used to access elements from the end of a list (or array)

(or)

i = int(input())
lis = list(map(int, input().strip().split()))
z = max(lis)
while max(lis) == z:
    lis.remove(max(lis))
print(max(lis))



lis = [1, 2, 3, 3]
lis.remove(3) # Remove the first occurrence of 3
print lis #[1, 2, 3]


numbers = [3, 7, 2, 9, 5]
max_value = max(numbers) # Find the maximum value


(or)

print(sorted(list(set(arr)))[-2])

(or)

 n = int(input())
    arr = list(map(int, input().split()))
    print(max([x for x in arr if x!=max(arr)])) # excluding max in the list comphrenstion and then getting the maax from the list that doesn contains first max
    
(or)

n = int(input())
a = sorted(map(int, input().split()), reverse=True)
#print(a) #[6, 6, 5, 3, 2]
#print(a.count(a[0])) #2, isnt this brilliant?
print(a[a.count(a[0])])



diff between sort n sorted

sorted() — built-in function
Works on any iterable (not just lists).

Returns a new sorted list.
Doesn’t modify the original data.
a = [3, 1, 2]
b = sorted(a)
print(a)  # [3, 1, 2]
print(b)  # [1, 2, 3]
You can also do:
a = sorted(map(int, input().split()), reverse=True)


list.sort() — method on lists only
Sorts the list in-place.

Returns None, so you shouldn’t assign it back to a variable.

a = [3, 1, 2]
a.sort()
print(a)  # [1, 2, 3]

a = a.sort()
print(a)  # None

sort() is a method, not a standalone function.
You can only do a.sort() after you already have a list a.




A standalone function is a function that:
Is not attached to any object or class.
Can be called on its own, by name.

Examples: print(), len(), sorted(), sum(), max(), input() — all built-in standalone functions in Python.

Think of it like this:
sorted() is a standalone function → you just call it directly:
sorted([3, 1, 2])

But sort() is not standalone — it’s a method of list objects. You must call it on a list:
my_list = [3, 1, 2]
my_list.sort()  # works
sort() 


If functions were tools:
A standalone function is like a screwdriver you can pick up and use any time.
A method (like sort()) is like a built-in tool inside a toolbox (the list). You must open the toolbox (list) first to access and use it.
