Given an integer,n , print the following values for each integer i from 1 to n:

Decimal
Octal
Hexadecimal (capitalized)
Binary

Function Description

Complete the print_formatted function in the editor below.
print_formatted has the following parameters:
>int number: the maximum value to print

Prints
The four values must be printed on a single line in the order specified above for each i from 1 to n. 
Each value should be space-padded to match the width of the binary value of number and the values should be separated by a single space.

Input Format

A single integer denoting n.

Constraints
1<=n<=99

Sample Input
17

Sample Output

    1     1     1     1
    2     2     2    10
    3     3     3    11
    4     4     4   100
    5     5     5   101
    6     6     6   110
    7     7     7   111
    8    10     8  1000
    9    11     9  1001
   10    12     A  1010
   11    13     B  1011
   12    14     C  1100
   13    15     D  1101
   14    16     E  1110
   15    17     F  1111
   16    20    10 10000
   17    21    11 10001


Solution:


def print_formatted(number):
    for i in range(1, number+1):
        print(" {}  {}  {}  {} ".format(i, oct(i).lstrip('0o'), hex(i).lstrip('0x'), bin(i).lstrip('0b')))        
        

(or)
    w = len(bin(number)[2:]) // len =2, bin(number) = 0b10, bin(number)[2:] = 10
    for i in range(1, number+1):
        b = bin(int(i)).replace('0b','').rjust(w, ' ')
        o = oct(int(i)).replace('0o','', 1).rjust(w, ' ')
        h = hex(int(i)).replace('0x','').upper().rjust(w, ' ')
        j = str(i).rjust(w, ' ')
        print(j, o, h, b)

#width=10 
#"pooja".center(width,'-') // ---pooja---

(or)

        print (str(i).rjust(w,' '),str(oct(i)[2:]).rjust(w,' '),str(hex(i)[2:].upper()).rjust(w,' '),str(bin(i)[2:]).rjust(w,' '),sep=' ')
        
      
(or)

width = len("{0:b}".format(n))
for i in xrange(1,n+1):
    print "{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}".format(i, width=width)    
        #0 is the placeholder in the string format

(or)
n = 5  # example input
width = len(f"{n:b}")
for i in range(1, n + 1):
    print(f"{i:{width}d} {i:{width}o} {i:{width}X} {i:{width}b}")

f"{n:b}" means: convert n to binary
5 in binary is '101'
So len("101") = 3

""
example 1: Convert an Integer to Binary

x = 10
binary = bin(x)
print(binary)

This code will output: 0b1010

The output starts with 0b, which indicates that the following characters represent a binary value.

example 2: Using 'lstrip' to Remove Leading Characters
If you want to remove the leading characters (-0b or 0b) from the binary string, you can use the lstrip() method:

x = 10
binary = bin(x)
stripped_binary = binary.lstrip('-0b')
print(stripped_binary)

This code will output:
1010

example 3: Example 4: Using 'zfill' to Add Leading Zeros
If you want to pad the binary string with leading zeros, you can use the zfill() method:

x = 10
binary = bin(x)[2:].zfill(8)
print(binary)
Python
This code will output:

00001010

The [2:] slice notation is used to remove the leading 0b. The zfill(8) method adds leading zeros to pad the string to a length of 8 characters.
'"""


"""

Right padding:

This is the most common way to use padding format, right padding with spaces.

name = 'Bill Doe'
balance = 13.566
print(f"- {'Name':<8}: {name}")
print(f"- {'Balance':8}: {balance}")
>>> - Name    : Bill Doe
>>> - Balance : 13.566

The < indicate the right orientation, you can omit it, because it is a default value. The first print it is explicit and on the second one is omitted.

Left Padding:

Just use> to indicate the orientation.

name = 'Bill Doe'
balance = 13.566
print(f"- {name:>12}")
print(f"- {balance:>12}")
>>> -     Bill Doe
>>> -       13.566

Center Padding:

For center orientation use ^.

name = 'Bill'
print(f"---{name:^8}---")
>>> ---  Bill  ---

Type Formating:

There is an especial formatting atributes called type. This is an example of format typing for: decimal, octal, hexadecimal (capitalized) and binary values.

number = 2022
padding = 10
print(f"{'decimal':<{padding}}{number:d}")
print(f"{'octal':<{padding}}{number:o}")
print(f"{'hex':<{padding}}{number:X}")
print(f"{'binary':<{padding}}{number:b}")
>>> decimal   2022
>>> octal     3746
>>> hex       7E6
>>> binary    11111100110









Here’s a step-by-step explanation of how to convert a hexadecimal string to little-endian bytes, then back to an integer using big-endian interpretation, in Python:


# Step 1: Define a hexadecimal string
hex_string = "3A01"

# Step 2: Convert the hex string to an integer
decimal_value = int(hex_string, 16)
print(f"Decimal value: {decimal_value}")  # Output: 14849

# Step 3: Convert the integer to bytes in little-endian format
# Determine the number of bytes needed (len(hex_string) >> 1)
num_bytes = len(hex_string) >> 1  # Each two hex characters represent one byte
little_endian_bytes = decimal_value.to_bytes(num_bytes, "little")
print(f"Little-endian bytes: {little_endian_bytes}")  # Output: b'\x01\x3A'

# Step 4: Convert the little-endian bytes back to an integer, assuming big-endian
big_endian_int = int.from_bytes(little_endian_bytes, "big")
print(f"Big-endian interpreted integer: {big_endian_int}")  # Output: 31354


Step-by-Step Instructions:

1. Convert Hex to Integer:

Use int(hex_string, 16) to convert a hexadecimal string into a decimal integer.

2. Convert Integer to Little-Endian Bytes:

Use the .to_bytes() method:
First Argument: The number of bytes, which can be calculated as len(hex_string) >> 1.
Second Argument: "little" specifies little-endian byte order.

3. Convert Little-Endian Bytes Back to an Integer:

Use int.from_bytes() with "big" for big-endian byte order.

Output:
When you run the above code, you'll see:


more:


Decimal value: 14849
Little-endian bytes: b'\x01\x3A'
Big-endian interpreted integer: 31354

This shows the original decimal value, its little-endian byte representation, and its reinterpretation as a big-endian integer.



Imagine a Number: 14849

In hexadecimal, 14849 = 0x3A01
This means it has 2 bytes:
Byte 1: 0x3A (which is 58 in decimal)
Byte 2: 0x01 (which is 1 in decimal)

Now: How do we store those 2 bytes in memory?
Depending on endianness, we fill these boxes left to right in different orders.

Box 1     Box 2
------    ------
??        ??

Big-Endian (BE) – "Big end first"
Box 1     Box 2
------    ------
0x3A      0x01
So in memory: [0x3A, 0x01]
That gives you back 0x3A01 = 14849

Little-Endian (LE) – "Little end first"
Box 1     Box 2
------    ------
0x01      0x3A
So in memory: [0x01, 0x3A]
That gives you back 0x013A = 31354


Imagine a 2-digit number like 56.

another ex:

Decimal: 1
Binary (1 byte): 00000001
Hex: 0x01

Now say we want to store it in 2 bytes (16 bits). That means:
00000000 00000001

in hex: 
0x00 0x01

Big-Endian (MSB first):
Store most significant byte first (big end)
So memory will look like:
[0x00] [0x01]

Still represents 1 because:
0x00 * 256 + 0x01 = 1

Little-Endian (LSB first):
Store least significant byte first
So memory will look like:
[0x01] [0x00]

now:
0x01 + 0x00 * 256 = 1

print("Little-endian:", (1).to_bytes(2, byteorder='little'))  # b'\x01\x00'
print("Big-endian:   ", (1).to_bytes(2, byteorder='big'))     # b'\x00\x01'



**
0x1A3

1A3 (hex) = (1 * 16^2) + (A * 16^1) + (3 * 16^0)
          = (1 * 256) + (10 * 16) + (3 * 1)
          = 256 + 160 + 3
          = 419 (decimal)

print(int("1A3", 16))    # 419
print(int("1234", 16))   # 4660
print(hex(4660))         # '0x1234'

**

4660
Decimal: 4660
Hex: 0x1234
Binary: 00010010 00110100 (16 bits)

So it's made up of two bytes:
MSB (Most Significant Byte): 0x12 (18 in decimal)
LSB (Least Significant Byte): 0x34 (52 in decimal)


Big-Endian:
Store most significant byte first
Memory layout:
[0x12] [0x34]
This is just:
0x12 * 256 + 0x34 = 4660

Little-Endian:
Store least significant byte first
Memory layout:
[0x34] [0x12]
This gives:
0x34 + 0x12 * 256 = 13330

See the difference?

Same two bytes, but reversed
Now the interpreted value becomes 13330, not 4660

Python Example:
num = 4660

# Convert to 2 bytes
little = num.to_bytes(2, byteorder='little')
big = num.to_bytes(2, byteorder='big')

print("Little-endian bytes:", little)  # b'4\x12'
print("Big-endian bytes:   ", big)     # b'\x12\x34'

# Reverse it back
print("Little interpreted as big:", int.from_bytes(little, byteorder='big'))  # 13330
print("Big interpreted as little:", int.from_bytes(big, byteorder='little'))  # 13330













Big-endian: You say “fifty” then “six”
Little-endian: You say “six” then “fifty”
