Given the names and grades for each student in a class of n students, store them in a nested list and
print the name(s) of any student(s) having the second lowest grade.

Note: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.

records = [["chi", 20.0],["beta",50.0],["alpha",50.0]]


Input Format

The first line contains an integer, N, the number of students.
The 2N  subsequent lines describe each student over 2 lines.
- The first line contains a student's name.
- The second line contains their grade.

Constraints

2<=N<=5
There will always be one or more students having the second lowest grade.
Output Format

Print the name(s) of any student(s) having the second lowest grade in. 
If there are multiple students, order their names alphabetically and print each one on a new line.

Sample Input 
5
Harry
37.21
Berry
37.21
Tina
37.2
Akriti
41
Harsh
39

Sample Output 
Berry
Harry


Solution:

''''
if __name__ == '__main__':
    for _ in range(int(input())):
        name = input()
        score = float(input())
'''

marksheet = []
for _ in range(0,int(input())):
    marksheet.append([input(), float(input())])

second_highest = sorted(list(set([marks for name, marks in marksheet])))[1]
print('\n'.join([a for a,b in sorted(marksheet) if b == second_highest]))

(or)

d={} 
for _ in range(int(input())): 
    Name=input() 
    Grade=float(input()) 
    d[Name]=Grade 
v=d.values()
second=sorted(list(set(v)))[1]  #Remoing duplicte grades by using set data type , changing it to list, sorting in ascending order and taking the second lowest grade.
second_lowest=[] 
for key,value in d.items():  
    if value==second: 
        second_lowest.append(key) 
second_lowest.sort() 
for name in second_lowest: 
    print (name)

(or)

THIS APPROACH IS FUKCED UP

if __name__ == '__main__':
    a= []
    for _ in range(int(input())):
        name = input()
        score = float(input())
        a.append([score, name]) 

    a.sort() //The list a is ordered primarily by scores because the scores are the first elements in each sublist. Python's sort() function sorts lists by 
         //comparing the elements of the lists, starting with the first element. If the first elements are equal, it moves to the second elements, and so on.
    b = [i for i in a if i[0] != a[0][0]] // [37.21, 37.21, 37.2, 41, 39]
    c = [j for j in b if j[0] == b[0][0]] // [37.21, 37.21]
    
    c.sort(key=lambda x: x[1])
    for i in range(len(c)):
        print(c[i][1])

*************

This is an anonymous function (a small, unnamed function) defined using lambda.
The function takes one input (x), which represents an element of the list c.
x[1] extracts the second item (index 1) of the element x.


Default Sorting (Ascending):

c = [3, 1, 2]
c.sort()
print(c)  # Output: [1, 2, 3]


Sorting in Descending Order:

c = [3, 1, 2]
c.sort(reverse=True)
print(c)  # Output: [3, 2, 1]


Custom Key Function:

c = [(1, 3), (2, 1), (4, 2)]
c.sort(key=lambda x: x[1])  # Sort by the second element of each tuple
print(c)  # Output: [(2, 1), (4, 2), (1, 3)]


Original list: [(1, 3), (2, 1), (4, 2)]
Extracted keys: 3, 1, 2
Sort by keys: 1, 2, 3
Sorted list: [(2, 1), (4, 2), (1, 3)]


i u[dated it caUSE i thought i didnt cover it but i have below. anyway i will keep it jus in case 
***********************

How Sorting Works

Key Extraction:
The sort method iterates over each element in the list c and applies the lambda function to extract the key for comparison.
In this case, the key is the second element of each tuple/list.



For the list c = [(1, 3), (4, 1), (5, 2)]:

For (1, 3), lambda x: x[1] returns 3.
For (4, 1), lambda x: x[1] returns 1.
For (5, 2), lambda x: x[1] returns 2.


Comparison:
The sort method uses these extracted keys (3, 1, 2) to sort the tuples/lists.

Ordering:
The list is rearranged in ascending order based on the extracted keys.

Result
After sorting, the list c will be:

[(4, 1), (5, 2), (1, 3)]

(4, 1) comes first because 1 is the smallest key.
(5, 2) comes next because 2 is the next smallest key.
(1, 3) comes last because 3 is the largest key.
---
lambda:
A lambda function is a small anonymous function.

A lambda function can take any number of arguments, but can only have one expression.

example: 
Add 10 to argument a, and return the result:
x = lambda a : a + 10
print(x(5))
Multiply argument a with argument b and return the result:
x = lambda a, b : a * b
print(x(5, 6))

add_multiply = lambda x, y, z: (x + y) * z # Define a lambda function that takes three arguments
result = add_multiply(2, 3, 4) # Call the lambda function with arguments
print(result)  # Output: 20


sort:
The sort() method sorts the list ascending by default.

You can also make a function to decide the sorting criteria(s).

Syntax
list.sort(reverse=True|False, key=myFunc)

ex: # A function that returns the length of the value:
def myFunc(e):
  return len(e)

cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']

cars.sort(key=myFunc)

print(cars) #['VW', 'BMW', 'Ford', 'Mitsubishi']

another example-
# A function that returns the 'year' value:
def myFunc(e):
  return e['year']

cars = [
  {'car': 'Ford', 'year': 2005},
  {'car': 'Mitsubishi', 'year': 2000},
  {'car': 'BMW', 'year': 2019},
  {'car': 'VW', 'year': 2011}
]

cars.sort(key=myFunc) #[{'car': 'Mitsubishi', 'year': 2000}, {'car': 'Ford', 'year': 2005}, {'car': 'VW', 'year': 2011}, {'car': 'BMW', 'year': 2019}]

//cars.sort(key = lambda x: x['year'])

Order of Execution

1. The sort method is invoked on the cars list with key=myFunc.

2. For each dictionary in the list, myFunc is called:
For {'car': 'Ford', 'year': 2005}, myFunc returns 2005.
For {'car': 'Mitsubishi', 'year': 2000}, myFunc returns 2000.
For {'car': 'BMW', 'year': 2019}, myFunc returns 2019.
For {'car': 'VW', 'year': 2011}, myFunc returns 2011.

3.The sort method uses these returned values to sort the dictionaries:
The dictionary with year: 2000 (Mitsubishi) comes first.
Followed by the dictionary with year: 2005 (Ford).
Then the dictionary with year: 2011 (VW).
And finally, the dictionary with year: 2019 (BMW).

4.
After sorting, the cars list will be:
[
  {'car': 'Mitsubishi', 'year': 2000},
  {'car': 'Ford', 'year': 2005},
  {'car': 'VW', 'year': 2011},
  {'car': 'BMW', 'year': 2019}
]




Why No ()?
When you write key=myFunc, you are passing the function object (not the result of calling the function) to the sort() method.
Python's sort() method will then:

Call the function (myFunc) for each item in the list.
Use the return value of the function to determine the sorting order.

Behind the Scenes:

Internally, Python's sort() function does something like this:
Iterates over the list.
Calls myFunc(element) for each element (element is each dictionary in your list).
Collects the results (in this case, the 'year' values).
Sorts the list based on these results.

what if  cars.sort(key=myFunc())
It would try to execute myFunc() immediately, which is incorrect because myFunc() expects an argument (like a dictionary). 
This would result in an error unless myFunc were modified to handle being called without an argument.



This behavior is made possible because in Python, functions are first-class objects, meaning you can pass them around like any other value 
(e.g., as an argument to another function) without executing them immediately.


The key parameter in the sort() method is not a function itself, but it expects a callable object (usually a function) as its value.
The value of key should be something that Python can call, such as:

A user-defined function (like myFunc in your code).
A built-in function (e.g., str.lower, len).
A lambda function (e.g., lambda e: e['year']).

words = ["Apple", "banana", "Cherry"]
words.sort(key=str.lower)  # Sorts ignoring case.

-----------------
how dictionary  works: 

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

print(x) #before the change, dict_keys(['brand', 'model', 'year'])

car["color"] = "white"

print(x) #after the change, dict_keys(['brand', 'model', 'year', 'color'])

sets work?

Sets are used to store multiple items in a single variable.


a set is an unordered collection of unique elements. It automatically removes duplicates and does not preserve the insertion order
Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary,
all with different qualities and usage.

A set is a collection which is unordered, unchangeable*, and unindexed.

eg: False and 0 is considered the same value:

thisset = {"apple", "banana", "cherry", False, True, 0}

print(thisset) //{'banana', 'cherry', 'apple', True, False}

tuple?

Ordered: The order in which elements are stored is preserved.
Immutable: You cannot modify the contents after the tuple is created.
Can store heterogeneous data: Tuples can contain elements of different data types.

Tuples are written with round brackets.
eg: 
thistuple = ("apple", "banana", "cherry", "apple", "cherry")
print(thistuple)


tuples are immutable. This means that once a tuple is created, its values cannot be changed, added, or removed.
Tuples are typically used to group related data together and can store different types of elements, such as numbers, strings, or even other tuples.



A tuple is a data structure in programming that is similar to a list but with a key difference: tuples are immutable. This means that once a tuple is created, its values cannot be changed, added, or removed.

Tuples are typically used to group related data together and can store different types of elements, such as numbers, strings, or even other tuples.


# Concatenation of tuples
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
tuple3 = tuple1 + tuple2  # Output: (1, 2, 3, 4, 5, 6)

# Repeating a tuple
tuple4 = (1, 2) * 3  # Output: (1, 2, 1, 2, 1, 2)

list? 
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data,
the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

Lists are created using square brackets:

Example
Create a List:

thislist = ["apple", "banana", "cherry"]
print(thislist)


Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members. []
Tuple is a collection which is ordered and unchangeable. Allows duplicate members. ()
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members. {}
Dictionary is a collection which is ordered** and changeable. No duplicate members. {}
----
