STRIP

strip method is used to remove leading and trailing whitespace (spaces, tabs, newlines) or specified characters from a string. 
There are three related methods: strip, lstrip, and rstrip.

strip(): Removes both leading and trailing whitespace (or specified characters).
lstrip(): Removes leading whitespace (or specified characters).
rstrip(): Removes trailing whitespace (or specified characters).

syntax:
string.strip([chars])
string.lstrip([chars])
string.rstrip([chars])

string: The original string.
chars (optional): A string specifying the set of characters to be removed. If omitted, the default is to remove whitespace.


1. removing whitespaces

text = "   Hello, World!   "
print(text.strip())   # "Hello, World!"
print(text.lstrip())  # "Hello, World!   "
print(text.rstrip())  # "   Hello, World!"

2. removing specific characters 

text = "///Hello, World!///"
print(text.strip('/'))   # "Hello, World!"
print(text.lstrip('/'))  # "Hello, World!///"
print(text.rstrip('/'))  # "///Hello, World!"

3. removing multiple characters

text = "abcHello, World!cba"
print(text.strip('abc'))  # "Hello, World!"


These methods are useful for cleaning up user input or data read from files, ensuring that there are no unwanted characters around the main content of the strings.

---------------------------------------------------------------

JOIN

In Python, the join method is used to concatenate a sequence of strings with a specified delimiter. It is called on the delimiter string and,
takes an iterable of strings as its argument.


delimiter.join(iterable)

delimiter: The string to be used as the separator between the elements.
iterable: An iterable (e.g., list, tuple) containing the strings to be concatenated.

1. joining list of strings:

words = ["Hello", "world"]
sentence = " ".join(words)
print(sentence)  # Output: "Hello world"

2. using difference delimiter:

elements = ["one", "two", "three"]
comma_separated = ",".join(elements)
print(comma_separated)  # Output: "one,two,three"

hyphen_separated = "-".join(elements)
print(hyphen_separated)  # Output: "one-two-three"

3. joining with no delimeter:

chars = ['H', 'e', 'l', 'l', 'o']
word = "".join(chars)
print(word)  # Output: "Hello"

4. joining a tuple of strings:

items = ("apple", "banana", "cherry")
fruit_list = " & ".join(items)
print(fruit_list)  # Output: "apple & banana & cherry"

5. joining strings from a generator:

def string_generator():
    yield "Join"
    yield "these"
    yield "words"

result = " ".join(string_generator())
print(result)  # Output: "Join these words"


The join method is often used in scenarios where you need to construct a single string from multiple components, such as creating a CSV linefrom a
list of values, combining paths, or simply formatting output. It is efficient and concise for merging strings with a specified separator.

#print(*[num**2 for num in range(n)],sep='\n') #0 1 4 9 16

6. this would raise an error cause its integer

numbers = [1, 2, 3, 4, 5]
# This will raise an error: TypeError: sequence item 0: expected str instance, int found
# joined_numbers = "-".join(numbers)

# Convert integers to strings first
string_numbers = [str(number) for number in numbers]  map(numners:str)
joined_numbers = "-".join(string_numbers)
print(joined_numbers)  # Output: "1-2-3-4-5"

(or)

numbers = [1, 2, 3, 4, 5]
string_numbers = list(map(str, numbers))
print(string_numbers) 
-------------------------------

SPLIT

In Python, the split method is used to divide a string into a list of substrings based on a specified delimiter. 
By default, the delimiter is any whitespace (spaces, tabs, newlines).

syntax:
string.split([separator[, maxsplit]])
separator (optional): The delimiter string based on which the split will occur. If not provided, the default is any whitespace.
maxsplit (optional): The maximum number of splits to perform. If not provided or set to -1, all possible splits are made.

1. Splitting by Whitespace (Default Behavior):

text = "Hello world, welcome to Python."
words = text.split()
print(words)  # Output: ['Hello', 'world,', 'welcome', 'to', 'Python.']

2. splitting by specific delimeter:

data = "one,two,three,four"
items = data.split(',')
print(items)  # Output: ['one', 'two', 'three', 'four']

3. using maxsplit parameter

text = "apple banana cherry date"
fruits = text.split(' ', 2)
print(fruits)  # Output: ['apple', 'banana', 'cherry date']

4. Splitting on Multiple Characters (using Regular Expressions):
For more complex splitting scenarios, such as splitting on multiple characters or patterns, you can use the re.split method from the re (regular expressions)
module.

import re

text = "one1two2three3four"
items = re.split('[0-9]', text)
print(items)  # Output: ['one', 'two', 'three', 'four']

re.split method is different from the str.split method. In re.split, the pattern and the text are passed as arguments to the function, 
not as a method of the string object. This is because re.split is a function in the re module, not a method of the string object.

5. additional examples: 

5(a). Splitting Lines from a String:

text = "line1\nline2\nline3"
lines = text.split('\n')
print(lines)  # Output: ['line1', 'line2', 'line3']

5(b). Handling Multiple Consecutive Delimiters:

When using the default whitespace splitting, consecutive whitespace characters are treated as a single delimiter.

text = "a   lot    of spaces"
words = text.split()
print(words)  # Output: ['a', 'lot', 'of', 'spaces']

5(c). Splitting an Empty String:

text = ""
items = text.split()
print(items)  # Output: []


The split method is particularly useful for parsing strings, processing text data, and preparing input for further processing in various applications.


FORMAT:

a = int(input())
b = int(input())

print("{0} \n{1} \n{2}".format((a+b),(a-b),(a*b)))

"""
quantity = 3
itemno = 567
price = 49
myorder = "I want {} pieces of item number {} for {:.2f} dollars."
print(myorder.format(quantity, itemno, price))

quantity = 3
itemno = 567
price = 49
myorder = "I want {0} pieces of item number {1} for {2:.2f} dollars."
print(myorder.format(quantity, itemno, price))

print("{0:.2f}".format(avg)) 
"{0:.2f}", the 0 indicates that the first (and only, in this case) argument passed to the format() method should be inserted at that position.
In your code, avg is the only argument provided to format(), so it will be inserted at the position of {0}.

(or)
avg=1002.2342
print( format(avg, ".2f") )

more examples:
format(10, ".2f")  # "10.00" //Fixed-point number with specific decimal places:

format(1000000, ",")  # "1,000,000" //Comma as a thousands separator

format(0.25, ".1%")  # "25.0%" //percentage







SPLAT:

In Python, the * symbol, also known as the "splat" operator, has several important uses. Here are the key points of using * in Python:
Python: * unpacks iterables or collects multiple arguments into a tuple, and ** works similarly with dictionaries.

1. upacking iterables:

You can use * to unpack iterables (such as lists, tuples, and sets) into individual elements.

numbers = [1, 2, 3, 4]
print(*numbers)  # Output: 1 2 3 4

2. Variable-Length Argument Lists in Functions
In function definitions, * allows you to pass a variable number of arguments to a function.This is useful when you don't know in advance how 
many arguments might be passed to your function.

def print_numbers(*args):
    for number in args:
        print(number)

print_numbers(1, 2, 3)  # Output: 1 2 3

3. Keyword-Only Arguments
In function definitions, placing * before an argument makes all following arguments keyword-only. This means they must be specified by keyword.

def func(a, b, *, c):
    print(a, b, c)

func(1, 2, c=3)  # Output: 1 2 3
# func(1, 2, 3)  # This would raise a TypeError

4. Unpacking Dictionaries
Python: * unpacks iterables or collects multiple arguments into a tuple, and ** works similarly with dictionaries.

Using **, you can unpack dictionaries in function calls or other places where keyword arguments are used.

def print_key_values(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

data = {'name': 'Alice', 'age': 30}
print_key_values(**data)  # Output: name: Alice, age: 30


5. Combining Iterables
The * operator can be used to concatenate multiple iterables into a single list.

list1 = [1, 2, 3]
list2 = [4, 5, 6]
combined = [*list1, *list2]  # Output: [1, 2, 3, 4, 5, 6]


6. Using * for Multiplication and Repetition
The * operator is also used for multiplication of numbers and repetition of sequences.

# Multiplication
result = 3 * 4  # Output: 12

# Repetition
repeated_list = [1, 2, 3] * 2  # Output: [1, 2, 3, 1, 2, 3]
These various uses of the * operator make it a powerful and versatile tool in Python programming.


PRINT

print function has several parameters that control how it outputs values:

*values: This parameter allows you to pass multiple values to the print function. The * operator unpacks the values from an iterable, such as a list or tuple.
sep: This parameter specifies the string that separates the values. By default, it is a single space (' ').
end: This parameter specifies the string that is appended at the end of the output. By default, it is a newline character ('\n').
file: This parameter specifies the output stream to which the values are printed. By default, it is sys.stdout,
which is the standard output (usually the console).

values = [1, 2, 3]
print(*values) //1 2 3

print(1, 2, 3, sep=' - ') //1-2-3

print(1, 2, 3, end='; ')
print(4, 5, 6)
//1 2 3; 4 5 6 

print(1, 2, 3, sep=' - ') #1-2-3
print(1,2,3) #1 2 3
print(1,2,3, sep=',') #1,2,3
l=[1,2,3]
print(*l,sep=';') #1;2;3

The end parameter changes the ending character from the default newline to ; . As a result, the first print statement does not end with a newline,
and the second print statement continues on the same line.

import sys
print(1, 2, 3, file=sys.stdout)
By default, file is set to sys.stdout, which means the output goes to the standard output (usually the console).
You can change this to another file object to redirect the output.


































