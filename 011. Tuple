Given an integer,n , and n space-separated integers as input, create a tuple, , of those  integers. Then compute and print the result of hash(t).

Input Format

The first line contains an integer,n , denoting the number of elements in the tuple.
The second line contains n space-separated integers describing the elements in tuple .

Output Format

Print the result of t.

Sample Input 
2
1 2
Sample Output 
3713081631934410656


Solution: 
print(input()==0 or hash(tuple(map(int,input().strip().split()))))
 (or)

print(input() and hash(eval('('+input().replace(' ',',')+')'))) 



#input() and ...: This part is a logical operation. If the first input is considered "truthy" (i.e., not an empty string),
it proceeds to evaluate and hash the tuple. If the first input is an empty string (which is considered "falsy"), it short-circuits and
does not evaluate or hash the tuple. Instead, it just prints the empty string.

#and #raw_input().replace(' ',','): This line takes user input, replaces all spaces with commas, and
returns the modified string. For example, if the user enters "1 2 3", it becomes "1,2,3".

#'('+raw_input().replace(' ',',')+')': This surrounds the modified input string with parentheses.
This is done to create a string representation of a tuple. For example, if the user enters "1 2 3", it becomes "(1,2,3)".




(or)


>>>We need to read the first line of input to get it out of the way (it can be used to write a parser for the next line, but it isn't useful)
n = input()
>>>Read in the second line -- this is just a single string ex. '1 2 3 4'
input_line = input()
>>>Split the string by whitespace into a list
input_list = input_line.split()
Note: This is a list of strings ex. ['1', '2', '3', '4'] But we want a list of integers ex. [1, 2, 3, 4]
>>>>We need to convert the list elements from strings to ints
[Simple] Option 1 (since we know the number of elements, n):
    for i in range(n):
        input_list[i] = int(input_list[i])
[Simple] Option 2 (if we are ignoring the first input line for some reason):
    for i in range(len(input_list)):
        input_list[i] = int(input_list[i])
[More Advanced] Option 3:
    input_list = map(int, input_list)
[More Advanced] Option 4 (List composition):
    input_list = [int(x) for x in input_list]
Now input_list looks like this: [1, 2, 3, 4]

>>>>We need to convert our list of ints to a tuple of ints (as a list is not hashable, but a tuple is)
t = tuple(input_list)
print the result
print hash(t)

(or)

n = int(input())
ints = input().split()
t = tuple(int(i) for i in ints)
print(hash(t))



''' Why Lists are Not Hashable
A list in Python is not hashable due to two main reasons:

Mutability: Lists are mutable, meaning their content can change over time. Since the content of the list can change, the hash value of
the list would also need to change. This would violate the requirement for a hash value to be constant throughout the lifetime of the object.
If the hash value of an object changes, it could corrupt the internal state of dictionaries or sets
that rely on those hash values for quick lookups.

Implementation: The hash function for lists is not implemented because of their mutability. Python's core data structures such as
dictionaries and sets rely on the immutability of their keys to maintain consistent and reliable behavior.''''
