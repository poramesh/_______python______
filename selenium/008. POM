This chapter is a tutorial introduction to the Page Objects design pattern. A page object represents an area where the test interacts within the web
application user interface.

Benefits of using page object pattern:

Easy to read test cases
Creating reusable code that can share across multiple test cases
Reducing the amount of duplicated code
If the user interface changes, the fix needs changes in only one place


The following section will introduce the page module where the page objects will be defined.


Page Object Model (POM) in Selenium, which is a design pattern to create object-oriented classes that serve as an interface to the webpages
you want to automate. The purpose of the POM is to make your Selenium test scripts cleaner, maintainable, and reusable.


Hereâ€™s a breakdown of the logic in your test:

1. Page Object Pattern (page module)
The page module is likely a custom module where you've defined classes that represent different web pages (e.g., MainPage, SearchResultsPage).
These classes encapsulate the logic needed to interact with the elements on those pages (like entering search terms or clicking buttons). 
Instead of finding elements in each test directly, you interact with those pages through methods.

This defines a test class using the unittest framework, inheriting from unittest.TestCase. Each method that starts with test_ will be run as a test case.



import unittest
from selenium import webdriver
import page

class PythonOrgSearch(unittest.TestCase):
    """A sample test class to show how page object works"""

    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.get("http://www.python.org")

    def test_search_in_python_org(self):
        """Tests python.org search feature. Searches for the word "pycon" then
        verified that some results show up.  Note that it does not look for
        any particular text in search results page. This test verifies that
        the results were not empty."""

        #Load the main page. In this case the home page of Python.org.
        main_page = page.MainPage(self.driver)
        self.assertTrue(main_page.is_title_matches(), "python.org title doesn't match.")  #Checks if the word "Python" is in title
        main_page.search_text_element = "pycon"         #Sets the text of search textbox to "pycon"
        main_page.click_go_button()
        search_results_page = page.SearchResultsPage(self.driver)
        self.assertTrue(search_results_page.is_results_found(), "No results found.")         #Verifies that the results page is not empty

    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()


2. Page object classes

The page object pattern intends to create an object for each part of a web page. This technique helps build a
separation between the test code and the actual code that interacts with the web page.

The page.py will look like this:

from element import BasePageElement
from locators import MainPageLocators

class SearchTextElement(BasePageElement):
    """This class gets the search text from the specified locator"""

    #The locator for search box where search string is entered
    locator = 'q'


class BasePage(object):
    """Base class to initialize the base page that will be called from all
    pages"""

    def __init__(self, driver):
        self.driver = driver


class MainPage(BasePage):
    """Home page action methods come here. I.e. Python.org"""

    search_text_element = SearchTextElement()     #Declares a variable that will contain the retrieved text

    def is_title_matches(self):
        """Verifies that the hardcoded text "Python" appears in page title"""

        return "Python" in self.driver.title

    def click_go_button(self):
        """Triggers the search"""

        element = self.driver.find_element(*MainPageLocators.GO_BUTTON)
        element.click()


class SearchResultsPage(BasePage):
    """Search results page action methods come here"""

    def is_results_found(self):
        # Probably should search for this text in the specific page
        # element, but as for now it works fine
        return "No results found." not in self.driver.page_source


3. Page elements

The element.py will look like this:

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait


class BasePageElement(object):
    """Base page class that is initialized on every page object class."""

    def __set__(self, obj, value):
        """Sets the text to the value supplied"""

        driver = obj.driver
        WebDriverWait(driver, 100).until(
            lambda driver: driver.find_element(By.NAME, self.locator))
        driver.find_element(By.NAME, self.locator).clear()
        driver.find_element(By.NAME, self.locator).send_keys(value)

    def __get__(self, obj, owner):
        """Gets the text of the specified object"""

        driver = obj.driver
        WebDriverWait(driver, 100).until(
            lambda driver: driver.find_element(By.NAME, self.locator))
        element = driver.find_element(By.NAME, self.locator)
        return element.get_attribute("value")


4. Locators

One of the practices is to separate the locator strings from the place where they are getting used. In this example, locators of
the same page belong to the same class.

The locators.py will look like this:

from selenium.webdriver.common.by import By

class MainPageLocators(object):
    """A class for main page locators. All main page locators should come here"""

    GO_BUTTON = (By.ID, 'submit')

class SearchResultsPageLocators(object):
    """A class for search results locators. All search results locators should
    come here"""

    pass
