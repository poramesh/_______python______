The first thing you’ll want to do with WebDriver is navigate to a link. The normal way to do this is by calling get method:

driver.get("http://www.google.com")

WebDriver will wait until the page has fully loaded (that is, the onload event has fired) before returning control to your test or script.

Be aware that if your page uses a lot of AJAX on load then WebDriver may not know when it has completely loaded. If you 
need to ensure such pages are fully loaded then you can use waits.



Interacting with the page

Just being able to go to places isn’t terribly useful. What we’d really like to do is to interact with the pages, or, more 
specifically, the HTML elements within a page. First of all, we need to find one. WebDriver offers a number of ways to find elements. 

For example, given an element defined as:

<input type="text" name="passwd" id="passwd-id" />

you could find it using any of:

element = driver.find_element(By.ID, "passwd-id")
element = driver.find_element(By.NAME, "passwd")
element = driver.find_element(By.XPATH, "//input[@id='passwd-id']")
element = driver.find_element(By.CSS_SELECTOR, "input#passwd-id")

You can also look for a link by its text, but be careful! The text must be an exact match! You should also be careful when using XPATH in WebDriver.
If there’s more than one element that matches the query, then only the first will be returned.
If nothing can be found, a NoSuchElementException will be raised.


So, you’ve got an element. What can you do with it? First of all, you may want to enter some text into a text field:

element.send_keys("some text")

You can simulate pressing the arrow keys by using the “Keys” class:

element.send_keys(" and some", Keys.ARROW_DOWN)

It is possible to call send_keys on any element, which makes it possible to test keyboard shortcuts such as those used on GMail.
A side-effect of this is that typing something into a text field won’t automatically clear it. Instead, what you type will be appended to what’s
already there. You can easily clear the contents of a text field or textarea with the clear method:

element.clear()




Navigation: history and location



Earlier, we covered navigating to a page using the “get” command ( driver.get("http://www.example.com")). As you’ve seen, 
WebDriver has a number of smaller, task-focused interfaces, and navigation is a useful task. To navigate to a page, you can use get method:

driver.get("http://www.example.com")

To move backward and forward in your browser’s history:

driver.forward()
driver.back()

Please be aware that this functionality depends entirely on the underlying driver. It’s just possible that something unexpected may 
happen when you call these methods if you’re used to the behavior of one browser over another.




Cookies

Before moving to the next section of the tutorial, you may be interested in understanding how to use cookies. First of all, you need
to be on the domain that the cookie will be valid for:

# Go to the correct domain
driver.get("http://www.example.com")

# Now set the cookie. This one's valid for the entire domain
cookie = {'name' : 'foo', 'value' : 'bar'}
driver.add_cookie(cookie)

# And now output all the available cookies for the current URL
driver.get_cookies()


[
    {
        'name': 'foo',
        'value': 'bar',
        'path': '/', //cookie will be available on all path
        'domain': 'example.com',
        'expires': None,  # or a timestamp if an expiration is set
        'httpOnly': False,  # depends on how the cookie is set
        'secure': False     # depends on how the cookie is set
    }
]
