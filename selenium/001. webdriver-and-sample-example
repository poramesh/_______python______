WebDriver

This means that WebDriver interacts with a browser in the same way a real user would—by clicking buttons, entering text, and navigating web pages. 
It doesn't simulate interactions but actually controls the browser, either on the local machine or remotely via a Selenium server. This is a major
improvement in browser automation compared to previous methods,  making interactions more accurate.

Selenium WebDriver refers to both the language bindings and the implementations of the individual browser controlling code. This is commonly referred to as 
just WebDriver.

Selenium WebDriver is a W3C Recommendation

WebDriver is designed as a simple and more concise programming interface.
WebDriver is a compact object-oriented API.
It drives the browser effectively.


The Parts and Pieces

At its minimum, WebDriver talks to a browser through a driver. Communication is two-way: WebDriver passes commands to the browser through the driver, 
and receives information back via the same route.

Basic Communication
The driver is specific to the browser, such as ChromeDriver for Google’s Chrome/Chromium, GeckoDriver for Mozilla’s Firefox, etc. The driver runs on the
same system as the browser. This may or may not be the same system where the tests themselves are executed.

          [Host System]
+-----------+      +---------+      +-----------+
| WebDriver | ---> |  Driver | ---> |  Browser  |
+-----------+      +---------+      +-----------+



This simple example above is direct communication. Communication to the browser may also be remote communication through Selenium Server or RemoteWebDriver.
RemoteWebDriver runs on the same system as the driver and the browser.

[Test System]                   [Host System]
+-----------+      +-----------------+      +---------+      +-----------+
| WebDriver | ---> | RemoteWebDriver  | ---> |  Driver | ---> |  Browser  |
+-----------+      +-----------------+      +---------+      +-----------+


Remote communication can also take place using Selenium Server or Selenium Grid, both of which in turn talk to the driver on the host system

[Test System]                           [Grid Node (Host System)]
+-----------+      +-------------+      +---------+      +-----------+
| WebDriver | ---> | Selenium Grid| ---> |  Driver | ---> |  Browser  |
+-----------+      +-------------+      +---------+      +-----------+



Selenium controls web browsers

Selenium is many things but at its core, it is a toolset for web browser automation that uses the best techniques available to remotely control browser instances 
and emulate a user’s interaction with the browser.

Selenium allows users to simulate common activities performed by end-users; entering text into fields, selecting drop-down values and checking boxes, 
and clicking links in documents. It also provides many other controls such as mouse movement, arbitrary JavaScript execution, and much more.

Although used primarily for front-end testing of websites, Selenium is, at its core, a browser user agent library. The interfaces are ubiquitous to their 
application, encouraging composition with other libraries to suit your purpose.

Selenium supports automation of all the major browsers in the market through the use of WebDriver. WebDriver is an API and protocol that defines a
language-neutral interface for controlling the behaviour of web browsers. Each browser is backed by a specific WebDriver implementation, called a driver. 
The driver is the component responsible for delegating down to the browser, and handles communication to and from Selenium and the browser.

Selenium setup is quite different from the setup of other commercial tools. Before you can start writing Selenium code, you have to install the language
bindings libraries for your language of choice, the browser you want to use, and the driver for that browser.

common uses cases of selenium is - 

Repetitive Tasks:
Perhaps you need to log into a website and download something, or submit a form. You can create a Selenium script to run with a service at preset times.

Web Scraping:
Are you looking to collect data from a site that doesn’t have an API? Selenium will let you do this, but please make sure you are familiar with the website’s
terms of service as some websites do not permit it and others will even block Selenium.

Testing:
Running Selenium for testing requires making assertions on actions taken by Selenium. So a good assertion library is required. Additional features to
provide structure for tests require use of Test Runner.


Install a Selenium library
1. create a virtualenv: py -3 -m venv .venv
2. pip install selenium
3. Selenium requires a driver to interface with the chosen browser. Firefox, for example, requires geckodriver, which needs to be installed before the
below examples can be run. Make sure it’s in your PATH, e. g., place it in /usr/bin or /usr/local/bin.


Step-by-step instructions for constructing a Selenium script


Eight Basic Components:

Everything Selenium does is send the browser commands to do something or send requests for information. Most of what you’ll do with 
Selenium is a combination of these basic commands

Click on the link to “View full example on GitHub” to see the code in context.

1. Start the session

driver = webdriver.Chrome()

2. Take action on browser

driver.get("https://www.selenium.dev/selenium/web/web-form.html")

3. Request browser information

title = driver.title

4. Establish Waiting Strategy

Synchronizing the code with the current state of the browser is one of the biggest challenges with Selenium, and doing it well is an advanced topic.
Essentially you want to make sure that the element is on the page before you attempt to locate it and the element is in an interactable state before 
you attempt to interact with it. An implicit wait is rarely the best solution, but it’s the easiest to demonstrate here, so we’ll use it as a placeholder.


driver.implicitly_wait(0.5)

5. Find an element

The majority of commands in most Selenium sessions are element related, and you can’t interact with one without first finding an element

text_box = driver.find_element(by=By.NAME, value="my-text")

submit_button = driver.find_element(by=By.CSS_SELECTOR, value="button")

6. Take action on element

There are only a handful of actions to take on an element, but you will use them frequently.

text_box.send_keys("Selenium")
submit_button.click()

7. Request element information

Elements store a lot of information that can be requested.

text = message.text

8. End the session

This ends the driver process, which by default closes the browser as well. No more commands can be sent to this driver instance. See Quitting Sessions.

python first_script.py



Organizing and Executing Selenium Code:


from selenium import webdriver
from selenium.webdriver.common.by import By


def test_eight_components():
    driver = setup()

    title = driver.title
    assert title == "Web form"

    driver.implicitly_wait(0.5)

    text_box = driver.find_element(by=By.NAME, value="my-text")
    submit_button = driver.find_element(by=By.CSS_SELECTOR, value="button")

    text_box.send_keys("Selenium")
    submit_button.click()

    message = driver.find_element(by=By.ID, value="message")
    value = message.text
    assert value == "Received!"

    teardown(driver)

def setup():
    driver = webdriver.Chrome()
    driver.get("https://www.selenium.dev/selenium/web/web-form.html")
    return driver

def teardown(driver):
    driver.quit()


ABOUT THE Drivers:
Selenium requires a driver to interface with the chosen browser. Firefox, for example, requires geckodriver, which needs to be installed
before the below examples can be run. Make sure it’s in your PATH, e. g., place it in /usr/bin or /usr/local/bin.

Starting from version 4.6.0 (November 4, 2022) selenium comes with Selenium Manager packed in distribution.

Selenium Manager is a new tool that helps to get a working environment to run Selenium out of the box:
automatically discovers, downloads, and caches the drivers required by Selenium when these drivers are unavailable;
automatically discovers, downloads, and caches the browsers driven with Selenium (Chrome, Firefox, and Edge) when these browsers are not installed 
in the local system.

For example, to see the result of Selenium Manager work just run any selenium script without previous driver setup and explore ~/.cache/selenium.


ABOUT SELENIUM REMOTE WEBDRIVER
The Selenium server is only required if you want to use the remote WebDriver. See the Using Selenium with remote WebDriver section for more details.
If you are a beginner learning Selenium, you can skip this section and proceed with next chapter.



SIMPLE USAGE OF SELENIUM:

If you have installed Selenium Python bindings, you can start using it from Python like this.

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

driver = webdriver.Firefox()
driver.get("http://www.python.org")
assert "Python" in driver.title
elem = driver.find_element(By.NAME, "q")
elem.clear()
elem.send_keys("pycon")
elem.send_keys(Keys.RETURN)
assert "No results found." not in driver.page_source
driver.close()

The above script can be saved into a file (eg:- python_org_search.py), then it can be run like this:

python python_org_search.py


USING TEST CASES 

Selenium is mostly used for writing test cases. The selenium package itself doesn’t provide a testing tool/framework. You can write test
cases using Python’s unittest module.

import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

class PythonOrgSearch(unittest.TestCase):

    def setUp(self):
        self.driver = webdriver.Firefox()

    def test_search_in_python_org(self):
        driver = self.driver
        driver.get("http://www.python.org")
        self.assertIn("Python", driver.title)
        elem = driver.find_element(By.NAME, "q")
        elem.send_keys("pycon")
        elem.send_keys(Keys.RETURN)
        self.assertNotIn("No results found.", driver.page_source)


    def tearDown(self):
        self.driver.close()

if __name__ == "__main__":
    unittest.main()


You can run the above test case from a shell like this:

python test_python_org_search.py
.
----------------------------------------------------------------------
Ran 1 test in 15.566s

OK

unittest.main() uses the TestLoader to automatically discover all test methods in your test classes by looking for method names that
start with test_, packages them into a test suite, and runs them using a test runner.

Finding test cases:
The TestLoader scans the current module (your Python file) and identifies any classes that inherit from unittest.TestCase.

Finding test methods:
Inside each class that inherits from unittest.TestCase, it looks for all methods that start with test_.

Creating a test suite:
The discovered test methods are collected into a TestSuite. A TestSuite is essentially a collection of test cases that will be executed together.

Running the tests:
The TestRunner runs each test case in the suite one by one. Before each test, the setUp method is executed, and after each test, the tearDown method is called.


Using Selenium with remote WebDriver

To use the remote WebDriver, you should have the Selenium server running. To run the server, use this command:

java -jar selenium-server-standalone-2.x.x.jar

While running the Selenium server, you could see a message looking like this:

15:43:07.541 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub

The above line says that you can use this URL for connecting to the remote WebDriver. Here are some examples:

from selenium import webdriver

driver = webdriver.Remote(
   command_executor='http://127.0.0.1:4444/wd/hub',
   options=webdriver.ChromeOptions()
)

driver = webdriver.Remote(
   command_executor='http://127.0.0.1:4444/wd/hub',
   options=webdriver.FirefoxOptions()
)
