



ActionChains in Selenium is a powerful tool for automating more complex user interactions with web elements, 
such as hovering over elements, clicking and holding, drag-and-drop, and more. This is particularly 
useful when dealing with elements that require more than just clicking or typing, such as performing
a double-click, right-click (context click), or performing a series of actions in sequence.


Key Features of ActionChains:

1. Mouse Movements: Move the mouse to hover over elements.

actions.move_to_element(element).perform() //Moves the mouse pointer to an element (used for hover or tooltips).


2. Clicks: Perform single or double clicks, as well as right-clicks (context clicks).

actions.click(element).perform() //clicks on an eleemnt
actions.double_click(element).perform() //double clicks
actions.context_click(element).perform() //Right-clicks (context menu) on an element.


3. Click and Hold: Click and hold the mouse on an element, or drag and drop.

actions.click_and_hold(element).perform() //Clicks and holds the mouse button on an element.

actions.release().perform() //Releases the mouse button (used after click_and_hold()).

actions.pause(2).perform()  # Pauses for 2 seconds



more example:

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By

driver = webdriver.Chrome()

driver.get("https://www.example.com")

element = driver.find_element(By.ID, "click-hold-id")

actions = ActionChains(driver)
actions.click_and_hold(element).pause(2).release().perform()

driver.quit()



4. Keypresses: Send key presses like pressing "Enter" or "Tab".

actions.send_keys("Hello").perform()

example:

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()

driver.get("https://www.example.com")

actions = ActionChains(driver)
actions.send_keys("Hello").send_keys(Keys.ENTER).perform()
driver.quit()


5. Chained Actions: Perform multiple actions in sequence (e.g., moving to an element and clicking it).

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By

driver = webdriver.Chrome()

driver.get("https://www.example.com")
hover_element = driver.find_element(By.ID, "hover-id")
click_element = driver.find_element(By.ID, "click-id")
actions = ActionChains(driver)

actions.move_to_element(hover_element).click(click_element).perform()

driver.quit()


6. drag and drop:

actions.drag_and_drop(source_element, target_element).perform()


from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By

driver = webdriver.Chrome()
driver.get("https://www.example.com")

source_element = driver.find_element(By.ID, "source-id")
target_element = driver.find_element(By.ID, "target-id")

actions = ActionChains(driver)
actions.drag_and_drop(source_element, target_element).perform()

driver.quit()


Important Notes:
Chained Actions: ActionChains allows actions to be queued up before performing. perform() must be called
at the end to execute the sequence.
Explicit Waits: When dealing with actions that take time to load or respond, using explicit waits with WebDriverWait 
is recommended to avoid interaction issues.
Non-blocking: ActionChains creates non-blocking events, meaning that the browser isn't frozen until these
events are triggered.



