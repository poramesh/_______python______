passing a function as an argument to another function is a common practice in many programming languages, including Python. This is often done to implement
higher-order functions, callbacks, or to apply functions to elements in a collection.

Passing a Function as an Argument

Suppose we have a function that takes another function as an argument and applies it to each element of a list. This function can be called apply_to_each.


def apply_to_each(data, func):
    return [func(item) for item in data]

# A simple function to be passed as an argument
def square(x):
    return x * x

# Another function to be passed as an argument
def cube(x):
    return x * x * x

# A list of numbers
numbers = [1, 2, 3, 4, 5]

# Using the apply_to_each function with the square function
squared_numbers = apply_to_each(numbers, square)
print("Squared numbers:", squared_numbers)  # Output: [1, 4, 9, 16, 25]

# Using the apply_to_each function with the cube function
cubed_numbers = apply_to_each(numbers, cube)
print("Cubed numbers:", cubed_numbers)  # Output: [1, 8, 27, 64, 125]

--------------
Real-world Example: Using a Callback Function

A common real-world scenario is using a callback function, which is a function passed into another function to be called at a specific point 
in the execution of that function.

def fetch_data_from_database(callback):
    # Simulate fetching data
    data = {"name": "Alice", "age": 30}
    # Once data is fetched, call the callback function
    callback(data)

# Define a callback function
def process_data(data):
    print(f"Processing data: {data}") #Processing data: {'name': 'Alice', 'age': 30}

# Pass the callback function to the function that fetches data
fetch_data_from_database(process_data)
