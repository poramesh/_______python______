Task: 
You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.

For Example:

Www.HackerRank.com → wWW.hACKERrANK.COM
Pythonist 2 → pYTHONIST 2  

Constraints:
0<len(s)<=1000

Sample Input 
HackerRank.com presents "Pythonist 2".
Sample Output 
hACKERrANK.COM PRESENTS "pYTHONIST 2".

Solution:

def swap_case(s):
    s = list(s)
    for i in range(len(s)):
        if s[i].islower():
            s[i] = s[i].upper()
        elif s[i].isupper():
            s[i] = s[i].lower()
    
    return "".join(s)
    
 (or)

def swap_case(s):
    upper_case =['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    lower_case = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

    
    t =""
    
    for i in s:
      if i in upper_case:
          k = i.lower()
          t = t + k
      elif i in lower_case:
          p = i.upper()
          t = t + p
      else:
        l=i
        t = t + l
 
    return t

(or)

print ''.join([i.lower() if i.isupper() else i.upper() for i in input()])

//The isupper() and islower() methods will return False for periods, so the else part of the conditional is executed, converting
the period to uppercase using i.upper(). Since periods or space do not have a case, they remain unchanged.

(or)

def swap_case(x):
    return "".join(map(lambda x : x.lower() if x.isupper() else x.upper(), list(s)))


if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)



things learnt:

The * is the splat operator, which just means to unpack the elements in an iterable (e.g. map or list).

Some examples:

>>> l = [1,2,3,4,5,6]
>>> print(l)
[1, 2, 3, 4, 5, 6]
>>> print(*l)
1 2 3 4 5 6
>>> print(*map(lambda x : x**2, l))
1 4 9 16 25 36


list(s): Converts the string s into a list of characters.
map(lambda x : x.lower() if x.isupper() else x.upper(), list(s)): Applies a lambda function to each character in the list. This lambda function checks if the character is uppercase using x.isupper().
If it's uppercase, it converts it to lowercase using x.lower(), and vice versa using x.upper().
"".join(...): Joins the characters back together into a string.



sep is an argument used with the print() function in Python.
It specifies the separator string that is inserted between the values passed to the print() function.
Syntax: print(value1, value2, ..., sep=separator)


print('Hello', 'world', sep=', ')
# Output: Hello, world

join() is a method that concatenates the elements of an iterable (such as a list or a tuple) into a single string.
It takes an iterable of strings as its argument and returns a single string that consists of all the elements joined together with a specified separator.

Syntax: separator.join(iterable)

words = ['Hello', 'world', '!']
sentence = ' '.join(words)
print(sentence)  # Output: Hello world !


sep: This parameter specifies the string that separates the values. By default, it is a single space (' ').
end: This parameter specifies the string that is appended at the end of the output. By default, it is a newline character ('\n').

values = [1, 2, 3]
print(*values) //1 2 3

print(1, 2, 3, sep=' - ') //1-2-3

print(1, 2, 3, end='; ')
print(4, 5, 6)
//1 2 3; 4 5 6 


print(1, 2, 3, sep=' - ') #1-2-3
print(1,2,3) #1 2 3
print(1,2,3, sep=',') #1,2,3
l=[1,2,3]
print(*l,sep=';') #1;2;3
print(*l,end=';') #1 2 3;
