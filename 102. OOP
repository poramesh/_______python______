A primary goal of object-oriented programming is to make it possible
to write code that is close to the way you think about the things your code
represents. This will make it easier to reason about the code and think
through its correctness.

A class is a data type. In Python, type and class are (mostly) synonymous. An object is an instance of a class. For example, Python has a
list class. If I make a list called mylist. Then, mylist is an object of type
list.

mylist = []
print(type(mylist)) #<class ’list’>
print(isinstance(mylist, list)) #true 
print(isinstance(mylist, str)) #FALSE

There are all kinds of classes built into Python. Some you might not
expect.

def foo():
    return 0
print(type(foo)) <class ’function’>


For the advanced students, here is a more exotic example called a generator. In Python you can yield instead of return. If so, the result will be
something called a generator and not a function. This powerful idea shows
up a lot in Python, but we won’t really be able to get our head around it
until we understand how classes are able to package up data and code.

def mygenerator(n):
   for i in range(n):
       yield i
       
print(type(mygenerator)) #<class ’function’>
print(type(mygenerator(5))) #<class ’generator’>

