Task:
We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed).
Let's try to understand this with an example.
You are given an immutable string, and you want to make changes to it.

Example

>>> string = "abracadabra"
You can access an index by:

>>> print string[5]
a

Example
>>> string = "abracadabra"
>>> l = list(string)
>>> l[5] = 'k'
>>> string = ''.join(l)
>>> print string
abrackdabra

Another approach is to slice the string and join it back.
Example
>>> string = string[:5] + "k" + string[6:]
>>> print string
abrackdabra

Immutability: Strings are immutable, so the original string "string" remains unchanged in memory.
New Object: The expression string = string[:5] + "k" + string[6:] creates a new string object.


Task

Read a given string, change the character at a given index and then print the modified string.

Function Description

mutate_string has the following parameters:

string string: the string to change
int position: the index to insert the character at
string character: the character to insert

solution:

s = input()
i, c = input().split()

print (s[:int(i)] + c + s[int(i)+1:])

#s = "You are learning Python"
print(s[:]) # outputs "You are learning Python"
print(s[1:6]) # outputs "ou ar", because s[1] is "o", s[5] is "r"
print(s[10:]) # outputs "arning Python" because it's the slice from index 10 to the end of the string
print(s[:10]) # outputs "You are le" because it's the slice from the start to index 9

(or)

def mutate_string(string, position, character):
    sting = list(string)
    sting[position] = character
    return ''.join(sting)
    
if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
