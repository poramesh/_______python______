Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members. []
Tuple is a collection which is ordered and unchangeable. Allows duplicate members. ()
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members. {}
Dictionary is a collection which is ordered** and changeable. No duplicate members. {}

DICTIONARY

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

print(x) #before the change, dict_keys(['brand', 'model', 'year'])

car["color"] = "white"

print(x) #after the change, dict_keys(['brand', 'model', 'year', 'color'])




# Dictionary example
person = {'name': 'Alice', 'age': 30, 'city': 'New York'}

# Using get() to retrieve values
name = person.get('name')
print(name)  # Output: 'Alice'

age = person.get('age')
print(age)   # Output: 30

# Trying to retrieve a key that doesn't exist
country = person.get('country')
print(country)  # Output: None

# Providing a default value
country = person.get('country', 'USA')
print(country)  # Output: 'USA'

another example:

  game_counts[game_id] = {
            "num_copies": 0,
            "available": 0,
            "not_available": 0
        }
this code holds the value like this:

game_counts = {
    248: {
        "num_copies": 5,
        "available": 4,
        "not_available": 1
    },
    249: {
        "num_copies": 5,
        "available": 5,
        "not_available": 0
    }
}

game_copies = [
    {"game_id": 248, "copy_id": 1, "availability_status": "Not Available"},
    {"game_id": 248, "copy_id": 2, "availability_status": "Available"},
    {"game_id": 248, "copy_id": 3, "availability_status": "Available"},
    {"game_id": 248, "copy_id": 4, "availability_status": "Available"},
    {"game_id": 248, "copy_id": 5, "availability_status": "Available"},
    {"game_id": 249, "copy_id": 1, "availability_status": "Available"},
    {"game_id": 249, "copy_id": 2, "availability_status": "Available"},
    {"game_id": 249, "copy_id": 3, "availability_status": "Available"},
    {"game_id": 249, "copy_id": 4, "availability_status": "Available"},
    {"game_id": 249, "copy_id": 5, "availability_status": "Available"},
]

-------------------
# Dictionary to store counts
game_counts = {}

# Iterate over game_copies and count copies and availability statuses
for entry in game_copies:
    game_id = entry["game_id"]
    availability = entry["availability_status"]
    
    if game_id not in game_counts:
        game_counts[game_id] = {
            "num_copies": 0,
            "available": 0,
            "not_available": 0
        }
    
    game_counts[game_id]["num_copies"] += 1
    
    if availability == "Available":
        game_counts[game_id]["available"] += 1
    elif availability == "Not Available":
        game_counts[game_id]["not_available"] += 1

for game_id, counts in game_counts.items():
    print(f"Game ID: {game_id}, Num Copies: {counts['num_copies']}, Available: {counts['available']}, Not Available: {counts['not_available']}")
--------------------------

Game ID: 248, Num Copies: 5, Available: 4, Not Available: 1
Game ID: 249, Num Copies: 5, Available: 5, Not Available: 0

sets work?

Sets are used to store multiple items in a single variable.

Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary,
all with different qualities and usage.

A set is a collection which is unordered, unchangeable*, and unindexed.

eg: False and 0 is considered the same value:

thisset = {"apple", "banana", "cherry", False, True, 0}

print(thisset)

tuple?

Tuples are used to store multiple items in a single variable.

Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.

A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.
eg: 
thistuple = ("apple", "banana", "cherry", "apple", "cherry")
print(thistuple)


list? 
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data,
the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

Lists are created using square brackets:

Example
Create a List:

thislist = ["apple", "banana", "cherry"]
print(thislist)



List

Ordered: Elements in a list are stored in a specific order, and this order is maintained when you iterate over the list.
Changeable: Lists are mutable, meaning you can modify elements after the list is created.
Allows Duplicate Members: Lists can contain duplicate elements.

Example: 
# Creating a list
my_list = [1, 2, 3, 3, 4]

# Ordered and changeable
print(my_list)  # Output: [1, 2, 3, 3, 4]

# Modifying the list
my_list[0] = 5
print(my_list)  # Output: [5, 2, 3, 3, 4]

# Allows duplicate members
my_list.append(4)
print(my_list)  # Output: [5, 2, 3, 3, 4, 4]

Tuple

Ordered: Like lists, elements in a tuple are ordered and maintain their order when you iterate over the tuple.
Unchangeable: Tuples are immutable, meaning once they are created, you cannot modify the elements or their order.
Allows Duplicate Members: Tuples can contain duplicate elements.

Example:
# Creating a tuple
my_tuple = (1, 2, 3, 3, 4)

# Ordered and unchangeable
print(my_tuple)  # Output: (1, 2, 3, 3, 4)

# Accessing elements
print(my_tuple[0])  # Output: 1

# Trying to modify a tuple (will raise TypeError)
try:
    my_tuple[0] = 5
except TypeError as e:
    print("TypeError:", e)

# Allows duplicate members
print(my_tuple.count(3))  # Output: 2 (count of '3' in the tuple)

Set

Unordered: Elements in a set are not stored in any particular order. The order of elements can change between iterations.
Unchangeable: Sets are mutable, meaning you can add or remove elements, but you cannot modify the elements themselves (e.g., change an existing element).
No Duplicate Members: Sets do not allow duplicate elements. If you add an element that already exists in the set, it will not be added again.

Example:
# Creating a set
my_set = {1, 2, 3, 3, 4}

# Unordered and changeable
print(my_set)  # Output: {1, 2, 3, 4} (Note the order may vary)

# Adding elements
my_set.add(5)
print(my_set)  # Output: {1, 2, 3, 4, 5}

# Trying to add a duplicate element (no effect)
my_set.add(3)
print(my_set)  # Output: {1, 2, 3, 4, 5}

# Removing an element
my_set.remove(2)
print(my_set)  # Output: {1, 3, 4, 5}

Dictionary

Ordered (from Python 3.7+): Dictionaries in Python 3.7 and later maintain the insertion order of keys. Earlier versions do not guarantee this order.
Changeable: Dictionaries are mutable, allowing you to add, modify, or remove key-value pairs.
No Duplicate Members (for keys): Keys in a dictionary must be unique. Values can be duplicated across different keys.

Example:
# Creating a dictionary
my_dict = {
    "apple": 10,
    "banana": 5,
    "cherry": 7,
    "apple": 15  # Note: Duplicate key "apple" will overwrite the previous value
}

# Ordered (Python 3.7+) and changeable
print(my_dict)  # Output: {'apple': 15, 'banana': 5, 'cherry': 7}

# Modifying a value
my_dict["banana"] = 8
print(my_dict)  # Output: {'apple': 15, 'banana': 8, 'cherry': 7}

# Adding a new key-value pair
my_dict["grape"] = 3
print(my_dict)  # Output: {'apple': 15, 'banana': 8, 'cherry': 7, 'grape': 3}

Summary
List: Ordered, changeable, allows duplicates ([]).
Tuple: Ordered, unchangeable, allows duplicates (()).
Set: Unordered, changeable (for adding/removing elements), no duplicates ({}).
Dictionary: Ordered (from Python 3.7+), changeable, keys must be unique, values can be duplicated ({}).


Reassigning Variables
Since immutable objects cannot be modified after creation, any operation that appears to modify the object actually creates a new object. 
Therefore, reassigning variables to point to these new objects is common practice:

x = 10
print(id(x))  # Output: id of the integer object

x = x + 1  # Creates a new integer object with value 11
print(id(x))  # Output: id of the new integer object
