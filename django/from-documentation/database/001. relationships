https://docs.djangoproject.com/en/5.2/topics/db/models/#automatic-primary-key-fields



Many-to-one relationships
  
To define a many-to-one relationship, use django.db.models.ForeignKey. You use it just like any other Field type: by including it as a class attribute of your model.

ForeignKey requires a positional argument: the class to which the model is related.

For example, if a Car model has a Manufacturer – that is, a Manufacturer makes multiple cars but each Car 
  only has one Manufacturer – use the following definitions:


CarModel                        Manufacturer
+--------------+              +------------------+
| car_model_id |              | manufacturer_id  |
| model_name   |              | name             |
| manufacturer_id | --------> | manufacturer_id  |
+--------------+              +------------------+
     (Many)                          (One)



Manufacturer Table
| manufacturer\_id | name   |
| ---------------- | ------ |
| 1                | Toyota |
| 2                | Ford   |

CarModel Table
| car\_model\_id | model\_name | manufacturer\_id |
| -------------- | ----------- | ---------------- |
| 101            | Corolla     | 1                |
| 102            | Camry       | 1                |
| 103            | Mustang     | 2                |




from django.db import models


class Manufacturer(models.Model):
    # ...
    pass


class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
    # ...



  in sql:


CREATE TABLE manufacturer (
    id SERIAL PRIMARY KEY
    other columns defined in Manufacturer model
);

CREATE TABLE car (
    id SERIAL PRIMARY KEY,
    manufacturer_id INTEGER NOT NULL,
    other columns defined in Car model
    FOREIGN KEY (manufacturer_id) REFERENCES manufacturer(id) ON DELETE CASCADE
);








eg:


To define a many-to-one relationship, use ForeignKey.

In this example, a Reporter can be associated with many Article objects, but an Article can only have one Reporter object:

from django.db import models


class Reporter(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class Article(models.Model):
    headline = models.CharField(max_length=100)
    pub_date = models.DateField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

    def __str__(self):
        return self.headline

    class Meta:
        ordering = ["headline"]




          in sql:

CREATE TABLE reporter (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(30),
    last_name VARCHAR(30),
    email VARCHAR(254)   Default max length for Django's EmailField
);

CREATE TABLE article (
    id SERIAL PRIMARY KEY,
    headline VARCHAR(100),
    pub_date DATE,
    reporter_id INTEGER NOT NULL,
    FOREIGN KEY (reporter_id) REFERENCES reporter(id) ON DELETE CASCADE
);



 Insert first reporter
INSERT INTO reporter (first_name, last_name, email)
VALUES ('John', 'Smith', 'john@example.com');

 Insert second reporter
INSERT INTO reporter (first_name, last_name, email)
VALUES ('Paul', 'Jones', 'paul@example.com');

 Insert article associated with John Smith (assumed id = 1)
INSERT INTO article (headline, pub_date, reporter_id)
VALUES ('This is a test', '2005-07-27', 1);


SELECT reporter_id FROM article WHERE id = 1;

 Output:
 reporter_id = 1

SELECT * FROM reporter WHERE id = 1;

 Output:
 id | first_name | last_name | email
  1 | John       | Smith     | john@example.com

  
What follows are examples of operations that can be performed using the Python API facilities.

Create a few Reporters:

>>> r = Reporter(first_name="John", last_name="Smith", email="john@example.com")
>>> r.save()

>>> r2 = Reporter(first_name="Paul", last_name="Jones", email="paul@example.com")
>>> r2.save()

Create an Article:

>>> from datetime import date
>>> a = Article(id=None, headline="This is a test", pub_date=date(2005, 7, 27), reporter=r)
>>> a.save()

>>> a.reporter.id
1

>>> a.reporter
<Reporter: John Smith>



>>> r3 = Reporter(first_name="John", last_name="Smith", email="john@example.com")
>>> Article.objects.create(
...     headline="This is a test", pub_date=date(2005, 7, 27), reporter=r3
... )
Traceback (most recent call last):
...
ValueError: save() prohibited to prevent data loss due to unsaved related object 'reporter'.






reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

  Django automatically creates a reverse relation on the related model (Reporter), which points back to the model that has the foreign key (Article).
By default, the name of this reverse relation is <modelname>_set, so in this case:

Reporter → has an auto-created attribute → `article_set

  This is a RelatedManager that lets you access all Article objects related to a given Reporter.



  | Operation                   | Equivalent to                                |
| - |  |
| `r.article_set.all()`       | `Article.objects.filter(reporter=r)`         |
| `r.article_set.create(...)` | `Article.objects.create(..., reporter=r)`    |
| `r.article_set.filter(...)` | `Article.objects.filter(reporter=r, ...)`    |
| `r.article_set.count()`     | `Article.objects.filter(reporter=r).count()` |

| **Django ORM**              | **SQL Equivalent**                                                      |
| --------------------------- | ----------------------------------------------------------------------- |
| `r.article_set.all()`       | `SELECT * FROM Article WHERE reporter_id = r.id;`                       |
| `r.article_set.create(...)` | `INSERT INTO Article (title, content, reporter_id) VALUES (..., r.id);` |
| `r.article_set.filter(...)` | `SELECT * FROM Article WHERE reporter_id = r.id AND ...;`               |
| `r.article_set.count()`     | `SELECT COUNT(*) FROM Article WHERE reporter_id = r.id;`                |




you don’t use .object after r.article_set. That’s because r.article_set is already a special manager (specifically, a RelatedManager) that
behaves just like Django's regular model managers (Model.objects).

Think of it like this:
Article.objects → used to query all Article objects
r.article_set → used to query all Article objects related to that specific Reporter (r)



article_set?
type(r.article_set)  # <class 'django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager'>
So it's a special manager, not a model or field.

  but a manager object with methods like:

.all() — get all related Articles
.filter(...) — filter related Articles
.create(...) — create a new Article related to the Reporter
.exclude(...), .order_by(...), etc.
  
You can do things like:

r = Reporter.objects.get(id=1)
r.article_set.all()        # Get all related articles
r.article_set.create(...)  # Create a new related article







  MAny to Many relationship




  from django.db import models


class Publication(models.Model):
    title = models.CharField(max_length=30)

    class Meta:
        ordering = ["title"]

    def __str__(self):
        return self.title


class Article(models.Model):
    headline = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication)

    class Meta:
        ordering = ["headline"]

    def __str__(self):
        return self.headline
What follows are examples of operations that can be performed using the Python API facilities.





SQL Equivalent
1. publication table

CREATE TABLE publication (
    id SERIAL PRIMARY KEY,
    title VARCHAR(30) NOT NULL
);

2. article table
  
CREATE TABLE article (
    id SERIAL PRIMARY KEY,
    headline VARCHAR(100) NOT NULL
);

3. Many-to-many join table: article_publications
Django automatically creates a join table for the ManyToManyField.


CREATE TABLE article_publications (
    id SERIAL PRIMARY KEY,
    article_id INTEGER NOT NULL REFERENCES article(id) ON DELETE CASCADE,
    publication_id INTEGER NOT NULL REFERENCES publication(id) ON DELETE CASCADE,
    UNIQUE(article_id, publication_id)
);


Separate CONSTRAINT block
Alternatively, you can write foreign keys like this:
article_id INTEGER NOT NULL,
publication_id INTEGER NOT NULL,

CONSTRAINT fk_article
    FOREIGN KEY (article_id)
    REFERENCES article(id)
    ON DELETE CASCADE,

CONSTRAINT fk_publication
    FOREIGN KEY (publication_id)
    REFERENCES publication(id)
    ON DELETE CASCADE

This table:
Links each article to one or more publications.
Allows one publication to be linked to many articles.
Ensures uniqueness of each article–publication pair.




  https://docs.djangoproject.com/en/5.2/topics/db/examples/many_to_many/






1. Create Publications

p1 = Publication(title="The Python Journal")
p1.save()

SQL:
INSERT INTO publication (title) VALUES ('The Python Journal');


p2 = Publication(title="Science News")
p2.save()

SQL:
INSERT INTO publication (title) VALUES ('Science News');

p3 = Publication(title="Science Weekly")
p3.save()

SQL:
INSERT INTO publication (title) VALUES ('Science Weekly');


2. Create Article

a1 = Article(headline="Django lets you build web apps easily")
a1.save()

SQL:
INSERT INTO article (headline) VALUES ('Django lets you build web apps easily');
Assume this gives a1 an ID of 1, and p1 has ID 1.

  
3. Associate Article with Publication

a1.publications.add(p1)

SQL:
INSERT INTO article_publications (article_id, publication_id) VALUES (1, 1);


4. Create second Article

a2 = Article(headline="NASA uses Python")
a2.save()

SQL:

INSERT INTO article (headline) VALUES ('NASA uses Python');
Assume a2.id = 2, p2.id = 2, p3.id = 3.


5. Add multiple publications to a2

a2.publications.add(p1, p2)
SQL:
INSERT INTO article_publications (article_id, publication_id) VALUES (2, 1);
INSERT INTO article_publications (article_id, publication_id) VALUES (2, 2);

a2.publications.add(p3)

SQL:
INSERT INTO article_publications (article_id, publication_id) VALUES (2, 3);


a2.publications.add(p3)  # adding again – will be ignored

SQL:
Nothing happens here, because the join table has a unique constraint:
UNIQUE(article_id, publication_id)








Reverse relationship: .article_set

p1.article_set.all()
This uses Django’s automatically created reverse relationship name. Because Article has:
publications = models.ManyToManyField(Publication)

Django automatically creates a reverse accessor on the Publication model called:
article_set

SQL behind this:

SELECT article.*
FROM article
JOIN article_publications ON article.id = article_publications.article_id
WHERE article_publications.publication_id = 1;

2. Forward relationship: .publications.all()

a1.publications.all()
This fetches all Publication records related to a given Article instance.

SQL behind this:

SELECT publication.*
FROM publication
JOIN article_publications ON publication.id = article_publications.publication_id
WHERE article_publications.article_id = 1;

3. Lookups across relationships

Article.objects.filter(publications__id=1)
This tells Django:
“Give me all Articles where there is at least one Publication with id=1.”

All of these are equivalent:

Article.objects.filter(publications__id=1)
Article.objects.filter(publications__pk=1)
Article.objects.filter(publications=p1)
Article.objects.filter(publications=1)

SQL:

SELECT DISTINCT article.*
FROM article
JOIN article_publications ON article.id = article_publications.article_id
WHERE article_publications.publication_id = 1;


4. Filter with field lookup on related model

Article.objects.filter(publications__title__startswith="Science")
This finds all Articles linked to any Publication whose title starts with “Science”.

SQL:

SELECT article.*
FROM article
JOIN article_publications ON article.id = article_publications.article_id
JOIN publication ON article_publications.publication_id = publication.id
WHERE publication.title LIKE 'Science%';


5. Why .distinct() is needed

Article.objects.filter(publications__title__startswith="Science")
If an article is linked to multiple matching publications, it will appear multiple times in the result.

Using .distinct() eliminates duplicates:
Article.objects.filter(publications__title__startswith="Science").distinct()






 Django Models Reference with SQL
 

 Django:
 class Publication(models.Model):
     title = models.CharField(max_length=30)
     class Meta:
         ordering = ["title"]

 class Article(models.Model):
     headline = models.CharField(max_length=100)
     publications = models.ManyToManyField(Publication)
     class Meta:
         ordering = ["headline"]


 SQL Table Definitions:
 Table: publication
 CREATE TABLE publication (
     id SERIAL PRIMARY KEY,
     title VARCHAR(30) NOT NULL
 );

 Table: article
 CREATE TABLE article (
     id SERIAL PRIMARY KEY,
     headline VARCHAR(100) NOT NULL
 );

 Junction Table for Many-to-Many:
 CREATE TABLE article_publications (
     id SERIAL PRIMARY KEY,
     article_id INTEGER NOT NULL REFERENCES article(id) ON DELETE CASCADE,
     publication_id INTEGER NOT NULL REFERENCES publication(id) ON DELETE CASCADE,
     UNIQUE(article_id, publication_id)
 );


Django:
 Article.objects.filter(publications__title__startswith="Science").count()
SQL:
SELECT COUNT(*)
FROM article a
JOIN article_publications ap ON a.id = ap.article_id
JOIN publication p ON ap.publication_id = p.id
WHERE p.title LIKE 'Science%';


Django:
 Article.objects.filter(publications__title__startswith="Science").distinct().count()
SQL:
SELECT COUNT(DISTINCT a.id)
FROM article a
JOIN article_publications ap ON a.id = ap.article_id
JOIN publication p ON ap.publication_id = p.id
WHERE p.title LIKE 'Science%';

Django:
 Publication.objects.filter(article__headline__startswith="NASA")
SQL:
SELECT DISTINCT p.*
FROM publication p
JOIN article_publications ap ON p.id = ap.publication_id
JOIN article a ON ap.article_id = a.id
WHERE a.headline LIKE 'NASA%';

Django:
Article.objects.exclude(publications=p2)
SQL:
SELECT * FROM article
WHERE id NOT IN (
    SELECT article_id FROM article_publications WHERE publication_id = 2
);

Django:
p2.article_set.clear()
SQL:
DELETE FROM article_publications WHERE publication_id = 2;


| Operation                | What It Affects                                              |
| ------------------------ | ------------------------------------------------------------ |
| `p2.article_set.clear()` | Only deletes rows in **join table** (`article_publications`) |
| `p2.delete()`            | Deletes the **publication** itself                           |



Django:
a4.publications.set([p3])
SQL:
DELETE FROM article_publications WHERE article_id = 4;
INSERT INTO article_publications (article_id, publication_id) VALUES (4, 3);


The .set() method resets the many-to-many relationships for that article, deleting old links and adding the new ones 
you specify. This is why you see both a DELETE and an INSERT query.
If you had just done .add(), it would only insert new rows without deleting existing ones.



a4.publications.set([p3])
This means: "For the Article instance a4, replace all its associated Publication objects with just the one publication p3."

Behind the scenes in SQL
DELETE FROM article_publications WHERE article_id = 4;

First, it removes all existing links between the article with id=4 and any publications.

This clears the previous many-to-many relationships.
INSERT INTO article_publications (article_id, publication_id) VALUES (4, 3);
Then, it creates a new link between the article id=4 and the publication id=3.
So now, article 4 is associated only with publication 3.





Django:
 Publication.objects.filter(title__startswith="Science").delete()
SQL:
DELETE FROM publication WHERE title LIKE 'Science%';
DELETE FROM article_publications
WHERE publication_id NOT IN (SELECT id FROM publication);

Django:
 Article.objects.filter(headline__startswith="Django").delete()
SQL:
DELETE FROM article WHERE headline LIKE 'Django%';
DELETE FROM article_publications
WHERE article_id NOT IN (SELECT id FROM article);















Many to Many relationship with through:


A standard many-to-many relationship is when:
One record in a model can be related to many records in another model.
And vice versa.

Example:

class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)

Django handles the creation of an intermediate table behind the scenes to store the links between Pizza and Topping.

What if you need extra info in that relationship?
Suppose you're not just interested in who belongs to what, but when someone joined or why they joined. You need
more data about the relationship itself — not just the two entities involved.

Example use-case:
A musician (Person) can be part of multiple bands (Group).
For each membership, you want to store:
When they joined (date_joined)
Why they were invited (invite_reason)
A regular ManyToManyField won’t help here — it can't store this extra data. So we define an intermediate model: Membership.

Using an Intermediate (through) Model

Here’s the full working structure:

from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=128)

class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through="Membership")

class Membership(models.Model):
    person = models.ForeignKey(Person, on_delete=models.CASCADE)
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)

Group.members uses a ManyToManyField to Person, but says use Membership as the intermediate table.

Membership explicitly connects Person and Group with ForeignKeys.
It also stores additional fields: date_joined, invite_reason.

Why add a Unique Constraint?
You don’t want the same person to be added to the same group multiple times.
So we enforce this rule:

class Meta:
    constraints = [
        models.UniqueConstraint(
            fields=["person", "group"], name="unique_person_group"
        )
    ]


SQL Table Translation


1. person table:

CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL
);


2. group table:

CREATE TABLE group (
    id SERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL
);


3. membership (intermediate) table:

CREATE TABLE membership (
    id SERIAL PRIMARY KEY,
    person_id INTEGER NOT NULL REFERENCES person(id) ON DELETE CASCADE,
    group_id INTEGER NOT NULL REFERENCES group(id) ON DELETE CASCADE,
    date_joined DATE NOT NULL,
    invite_reason VARCHAR(64) NOT NULL,
    CONSTRAINT unique_person_group UNIQUE (person_id, group_id)
);

This table replaces the default auto-generated many-to-many table.



Important Rules

The through model must have only one foreign key to each side of the relationship. If there’s ambiguity 
(e.g., more than one foreign key to the same model), use through_fields to be explicit.

In self-referential many-to-many relationships (e.g., a Person related to other Persons), two foreign keys to the same model 
are allowed. Again, through_fields may be needed if it's unclear which is which.

Creating Relationships Now
Since you're using an intermediate model, you don’t do:

group.members.add(person)

Instead, you create a Membership instance:

Membership.objects.create(
    person=some_person,
    group=some_group,
    date_joined="2025-06-01",
    invite_reason="Outstanding guitarist"
)
This gives you full control and the ability to store rich relationship data.

Summary
Use ManyToManyField(through=...) when you need extra fields on the relationship.
Define an explicit intermediate model (with ForeignKeys and extra fields).
Add UniqueConstraint if you want to prevent duplicate relationships.
Be careful with multiple foreign keys — you may need to specify through_fields






*******

Context
When you define a ManyToManyField using a custom intermediate model (via through=...), Django must know:
Which foreign key in the intermediate model points to the source model (the one that owns the ManyToManyField)
Which one points to the target model
If your intermediate model has more than one ForeignKey to the same model, Django won’t know which is which — 
unless you tell it explicitly using the through_fields argument.


Self-referential ManyToMany with Extra Fields
Suppose you're building a social network where a Person can follow other Persons.

You want to store extra info like when the follow started.

class Person(models.Model):
    name = models.CharField(max_length=100)
    follows = models.ManyToManyField(
        "self", through="Follow", symmetrical=False,
        through_fields=("follower", "followed")
    )

class Follow(models.Model):
    follower = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='following_set')
    followed = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='followers_set')
    since = models.DateTimeField()




So if you write:
person1.follows.add(person2)

Django uses Follow to create:
Follow(follower=person1, followed=person2)


Without through_fields, Django would say:
I see two foreign keys to the same model. I don’t know which one is "from" and which one is "to". Please be explicit.



Django uses the through_fields values to determine how to populate the custom through table when you use ORM methods like:
person1.follows.add(person2)
So if you get the order wrong, your app's logic is reversed — people will follow the wrong people.


>>> alice = Person.objects.create(name="Alice")
>>> bob = Person.objects.create(name="Bob")

>>> alice.follows.add(bob)

>>> Follow.objects.all()
<QuerySet [<Follow: Alice follows Bob>]>






Another Example: Multiple FKs to Same Model

class User(models.Model):
    name = models.CharField(max_length=50)
    contacts = models.ManyToManyField(
        "self", through="Connection",
        through_fields=("requester", "receiver"),
        symmetrical=False,
    )

class Connection(models.Model):
    requester = models.ForeignKey(User, on_delete=models.CASCADE, related_name='requests_sent')
    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='requests_received')
    status = models.CharField(max_length=10)

Connection has two FKs to User
You must use through_fields=("requester", "receiver")








user Table

CREATE TABLE user (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
Django creates an auto-incrementing primary key field (id) by default, unless you explicitly define one.

2. connection Table (Intermediate Model)

CREATE TABLE connection (
    id SERIAL PRIMARY KEY,
    requester_id INTEGER NOT NULL REFERENCES user(id) ON DELETE CASCADE,
    receiver_id INTEGER NOT NULL REFERENCES user(id) ON DELETE CASCADE,
    status VARCHAR(10) NOT NULL
);

requester_id and receiver_id are foreign keys pointing to the user table.
status is a custom field for the relationship (e.g., "pending", "accepted", etc.).
ON DELETE CASCADE means if a user is deleted, related connections are deleted too.

SQL Relationship Notes
This structure allows you to do things like:

Insert a new connection:
INSERT INTO connection (requester_id, receiver_id, status)
VALUES (1, 2, 'pending');

Query a user’s connections (from Django’s perspective):
-- Who does user 1 follow (sent requests)?
SELECT u.name
FROM user u
JOIN connection c ON u.id = c.receiver_id
WHERE c.requester_id = 1;

-- Who follows user 1 (received requests)?
SELECT u.name
FROM user u
JOIN connection c ON u.id = c.requester_id
WHERE c.receiver_id = 1;


About through_fields
In SQL, this doesn't change anything — it’s purely for Django’s ORM to know:
requester = source side of the many-to-many (User.contacts)
receiver = target side
Without through_fields, Django would raise an error since both fields point to the same table (user), and it wouldn’t know which is which.

*******







>>> ringo = Person.objects.create(name="Ringo Starr")
>>> paul = Person.objects.create(name="Paul McCartney")
>>> beatles = Group.objects.create(name="The Beatles")
>>> m1 = Membership(
...     person=ringo,
...     group=beatles,
...     date_joined=date(1962, 8, 16),
...     invite_reason="Needed a new drummer.",
... )
>>> m1.save()
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>]>
>>> ringo.group_set.all()
<QuerySet [<Group: The Beatles>]>
>>> m2 = Membership.objects.create(
...     person=paul,
...     group=beatles,
...     date_joined=date(1960, 8, 1),
...     invite_reason="Wanted to form a band.",
... )
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]>



Creating Person records

INSERT INTO person (name) VALUES ('Ringo Starr');
-- Ringo gets id = 1

INSERT INTO person (name) VALUES ('Paul McCartney');
-- Paul gets id = 2


Creating the Group

INSERT INTO "group" (name) VALUES ('The Beatles');
-- The Beatles gets id = 1


Creating Membership entries

-- Ringo joins The Beatles
INSERT INTO membership (person_id, group_id, date_joined, invite_reason)
VALUES (1, 1, '1962-08-16', 'Needed a new drummer.');

-- Paul joins The Beatles
INSERT INTO membership (person_id, group_id, date_joined, invite_reason)
VALUES (2, 1, '1960-08-01', 'Wanted to form a band.');


Equivalent Queries from Django ORM

beatles.members.all()
SELECT p.*
FROM person p
JOIN membership m ON m.person_id = p.id
WHERE m.group_id = 1;

ringo.group_set.all()
SELECT g.*
FROM "group" g
JOIN membership m ON m.group_id = g.id
WHERE m.person_id = 1;



You can also use add(), create(), or set() to create relationships, as long as you specify through_defaults for any required fields:

>>> beatles.members.add(john, through_defaults={"date_joined": date(1960, 8, 1)})
>>> beatles.members.create(
...     name="George Harrison", through_defaults={"date_joined": date(1960, 8, 1)}
... )
>>> beatles.members.set(
...     [john, paul, ringo, george], through_defaults={"date_joined": date(1960, 8, 1)}
... )




ou may prefer to create instances of the intermediate model directly.

If the custom through table defined by the intermediate model does not enforce uniqueness on the (model1, model2) pair, allowing multiple values, the remove() call will remove all intermediate model instances:

>>> Membership.objects.create(
...     person=ringo,
...     group=beatles,
...     date_joined=date(1968, 9, 4),
...     invite_reason="You've been gone for a month and we miss you.",
... )
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>, <Person: Ringo Starr>]>
>>> # This deletes both of the intermediate model instances for Ringo Starr
>>> beatles.members.remove(ringo)
>>> beatles.members.all()
<QuerySet [<Person: Paul McCartney>]>
The clear() method can be used to remove all many-to-many relationships for an instance:

>>> # Beatles have broken up
>>> beatles.members.clear()
>>> # Note that this deletes the intermediate model instances
>>> Membership.objects.all()
<QuerySet []>
Once you have established the many-to-many relationships, you can issue queries. Just as with normal many-to-many relationships, you can
query using the attributes of the many-to-many-related model:

# Find all the groups with a member whose name starts with 'Paul'
>>> Group.objects.filter(members__name__startswith="Paul")
<QuerySet [<Group: The Beatles>]>
As you are using an intermediate model, you can also query on its attributes:

# Find all the members of the Beatles that joined after 1 Jan 1961
>>> Person.objects.filter(
...     group__name="The Beatles", membership__date_joined__gt=date(1961, 1, 1)
... )
<QuerySet [<Person: Ringo Starr]>
If you need to access a membership’s information you may do so by directly querying the Membership model:

>>> ringos_membership = Membership.objects.get(group=beatles, person=ringo)
>>> ringos_membership.date_joined
datetime.date(1962, 8, 16)
>>> ringos_membership.invite_reason
'Needed a new drummer.'


Another way to access the same information is by querying the many-to-many reverse relationship from a Person object:

>>> ringos_membership = ringo.membership_set.get(group=beatles)
>>> ringos_membership.date_joined
datetime.date(1962, 8, 16)
>>> ringos_membership.invite_reason
'Needed a new drummer.'
