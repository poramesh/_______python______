

Throughout this tutorial, the documentation will walk you me through the creation of a basic poll application.

It’ll consist of two parts:
A public site that lets people view polls and vote in them.
An admin site that lets you add, change, and delete polls.

We’ll assume you have Django installed already. You can tell Django is installed and which version by running the following command 
in a shell prompt (indicated by the $ prefix):

$ python -m django --version

windows:
...\> py -m django --version


If Django is installed, you should see the version of your installation. If it isn’t, you’ll get an error
telling “No module named django”.


and you can create a virtual environment you can do this:
py -3 -m venv myenv
myenv/SCripts/activate


Creating a project:

If this is your first time using Django, you’ll have to take care of some initial setup. Namely, you’ll need to auto-generate
some code that establishes a Django project – a collection of settings for an instance of Django, including database configuration,
Django-specific options and application-specific settings.

From the command line, cd into a directory where you’d like to store your code and create a new directory named djangotutorial. 
(This directory name doesn’t matter to Django; you can rename it to anything you like.)

$ mkdir djangotutorial

Then, run the following command to bootstrap a new Django project:

$ django-admin startproject mysite djangotutorial

This will create a project called mysite inside the djangotutorial directory. If it didn’t work, see Problems running django-admin.

Note
You’ll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid 
using names like django (which will conflict with Django itself) or test (which conflicts with a built-in Python package).


Let’s look at what startproject created:

djangotutorial/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py


These files are:
manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details
about manage.py in django-admin and manage.py.

mysite/: A directory that is the actual Python package for your project. Its name is the Python package name you’ll need to use to import
anything inside it (e.g. mysite.urls).

mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, 
read more about packages in the official Python docs.

mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.

mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more
about URLs in URL dispatcher.

mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.

mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.





The development server

Let’s verify your Django project works. Change into the djangotutorial directory, if you haven’t already, and run the following commands:

$ python(py for windows) manage.py runserver


You’ll see the following output on the command line:

Performing system checks...

System check identified no issues (0 silenced).

You have unapplied migrations; your app may not work properly until they are applied.
Run 'python manage.py migrate' to apply them.

May 28, 2025 - 15:50:53
Django version 5.2, using settings 'mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.
For more information on production servers see: https://docs.djangoproject.com/en/5.2/howto/deployment/





;;;;;;


cd djangotutorial

(.env) C:\Users\pooja\Desktop\code-shh\python\django\poll_app\djangotutorial>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
June 05, 2025 - 11:27:49
Django version 5.2.1, using settings 'mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.
For more information on production servers see: https://docs.djangoproject.com/en/5.2/howto/deployment/   
[05/Jun/2025 11:27:59] "GET / HTTP/1.1" 200 12068
Not Found: /favicon.ico
[05/Jun/2025 11:28:00] "GET /favicon.ico HTTP/1.1" 404 2208

(.env) C:\Users\pooja\Desktop\code-shh\python\django\poll_app\djangotutorial>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK 
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK  
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying sessions.0001_initial... OK


;;;;;;


Note
Ignore the warning about unapplied database migrations for now; we’ll deal with the database shortly.




Now that the server’s running, visit http://127.0.0.1:8000/ with your web browser. You’ll see a “Congratulations!”page,
with a rocket taking off. It worked!

You’ve started the Django development server, a lightweight web server written purely in Python. We’ve included this with Django so you 
can develop things rapidly, without having to deal with configuring a production server – such as Apache – until you’re ready for production.

Now’s a good time to note: don’t use this server in anything resembling a production environment. It’s intended only for use while 
developing. (We’re in the business of making web frameworks, not web servers.)



Automatic reloading of runserver

The development server automatically reloads Python code for each request as needed. You don’t need to restart the server
for code changes to take effect. However, some actions like adding files don’t trigger a restart, so you’ll have to restart the server in these cases.





Creating the Polls app

Now that your environment – a “project” – is set up, you’re set to start doing work.
Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a 
utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.


Projects vs. apps

What’s the difference between a project and an app? An app is a web application that does something – e.g., a blog system, 
a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. 
A project can contain multiple apps. An app can be in multiple projects.



Your apps can live anywhere in your Python path. In this tutorial, we’ll create our poll app inside the djangotutorial folder.

To create your app, make sure you’re in the same directory as manage.py and type this command:

$ python manage.py startapp polls


That’ll create a directory polls, which is laid out like this:

polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

This directory structure will house the poll application.






Write your first view

Let’s write the first view. Open the file polls/views.py and put the following Python code in it:


polls/views.py

from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")



This is the most basic view possible in Django. To access it in a browser, we need to map it to a URL - and for this we need to 
define a URL configuration, or “URLconf” for short. These URL configurations are defined inside each Django app, and they are Python files named urls.py.


To define a URLconf for the polls app, create a file polls/urls.py with the following content:

polls/urls.py

from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index"), #and if you put path("okay",views.index, name="index") will expect /polls/okay 
]



Your app directory should now look like:

polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py


The next step is to configure the root URLconf in the mysite project to include the URLconf defined in polls.urls. To do this, add an 
import for django.urls.include in mysite/urls.py and insert an include() in the urlpatterns list, 
so you have:

mysite/urls.py

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("polls/", include("polls.urls")),
    path("admin/", admin.site.urls),
]

The path() function expects at least two arguments: route and view. The include() function allows referencing other URLconfs. Whenever
Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining 
string to the included URLconf for further processing.

The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py), 
they can be placed under “/polls/”, or under “/fun_polls/”, or under “/content/polls/”, or any other path root, and the app will still work.


When to use include()

You should always use include() when you include other URL patterns. The only exception is admin.site.urls, which is a pre-built URLconf
provided by Django for the default admin site.

You have now wired an index view into the URLconf. Verify it’s working with the following command:

$ python manage.py runserver

Go to http://localhost:8000/polls/ in your browser, and you should see the text “Hello, world. You’re at the polls index.”, 
which you defined in the index view.



Page not found?
If you get an error page here, check that you’re going to http://localhost:8000/polls/ and not http://localhost:8000/.





and now when we add just okay in the polls urls and we try to access any other urls it guides us this ursl we can access.

Using the URLconf defined in mysite.urls, Django tried these URL patterns, in this order:

admin/
polls/ okay [name='index']
The current path, polls/, didn’t match any of these.
