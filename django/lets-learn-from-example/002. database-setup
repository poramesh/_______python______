We’ll set up the database, create your first model, and get a quick introduction to Django’s automatically-generated admin site.


Database setup

Now, open up mysite/settings.py. It’s a normal Python module with module-level variables representing Django settings.
By default, the DATABASES configuration uses SQLite. If you’re new to databases, or you’re just interested in trying Django, this is 
the easiest choice. SQLite is included in Python, so you won’t need to install anything else to support your database.
When starting your first real project, however, you may want to use a more scalable database like PostgreSQL, to avoid database-switching headaches down the road.



While you’re editing mysite/settings.py, set TIME_ZONE to your time zone.

Also, note the INSTALLED_APPS setting at the top of the file. That holds the names of all Django applications that are activated
in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.

By default, INSTALLED_APPS contains the following apps, all of which come with Django:

django.contrib.admin – The admin site. You’ll use it shortly.
django.contrib.auth – An authentication system.
django.contrib.contenttypes – A framework for content types.
django.contrib.sessions – A session framework.
django.contrib.messages – A messaging framework.
django.contrib.staticfiles – A framework for managing static files.

These applications are included by default as a convenience for the common case.

Some of these applications make use of at least one database table, though, so we need to create the tables in the 
database before we can use them. To do that, run the following command:

$ python manage.py migrate

The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in
your mysite/settings.py file and the database migrations shipped with the app. You’ll see a message for each migration it applies.

If you’re interested, run the command-line client for your database and type \dt (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite),
or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the tables Django created.




:For the minimalists:
Like we said above, the default applications are included for the common case, but not everybody needs them. If you don’t need any or 
all of them, feel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running migrate. 
The migrate command will only run migrations for apps in INSTALLED_APPS.




Creating models

Now we’ll define your models – essentially, your database layout, with additional metadata.

:Philosophy on model:
A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the 
data you’re storing. Django follows the DRY Principle. The goal is to define your data model in one place 
and automatically derive things from it.


In our poll app, we’ll create two models: Question and Choice. A Question has a question and a publication date. A Choice has two fields: 
the text of the choice and a vote tally. Each Choice is associated with a Question.

These concepts are represented by Python classes. Edit the polls/models.py file so it looks like this:

polls/models.py

from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField("date published")


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

Here, each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables,
each of which represents a database field in the model.

Each field is represented by an instance of a Field class – e.g., CharField for character fields and DateTimeField for datetimes. 
This tells Django what type of data each field holds.

The name of each Field instance (e.g. question_text or pub_date) is the field’s name, in machine-friendly format. You’ll use 
this value in your Python code, and your database will use it as the column name.

You can use an optional first positional argument to a Field to designate a human-readable name. That’s used in a couple of 
introspective parts of Django, and it doubles as documentation. If this field isn’t provided, Django will
use the machine-readable name. In this example, we’ve only defined a human-readable name for Question.pub_date. 
For all other fields in this model, the field’s machine-readable name will suffice as its human-readable name.

Some Field classes have required arguments. CharField, for example, requires that you give it a max_length. That’s used not only in 
the database schema, but in validation, as we’ll soon see.

A Field can also have various optional arguments; in this case, we’ve set the default value of votes to 0.

Finally, note a relationship is defined, using ForeignKey. That tells Django each Choice is related to a single Question.
Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.




Activating models

That small bit of model code gives Django a lot of information. With it, Django is able to:
Create a database schema (CREATE TABLE statements) for this app.
Create a Python database-access API for accessing Question and Choice objects.
But first we need to tell our project that the polls app is installed.


::Philosophy::
Django apps are “pluggable”: You can use an app in multiple projects, and you can distribute apps, because they don’t have
to be tied to a given Django installation.



To include the app in our project, we need to add a reference to its configuration class in the INSTALLED_APPS setting. 
The PollsConfig class is in the polls/apps.py file, so its dotted path is 'polls.apps.PollsConfig'. 
Edit the mysite/settings.py file and add that dotted path to the INSTALLED_APPS setting. It’ll look like this:

mysite/settings.py

INSTALLED_APPS = [
    "polls.apps.PollsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

Now Django knows to include the polls app. Let’s run another command:

$ python manage.py makemigrations polls

You should see something similar to the following:

Migrations for 'polls':
  polls/migrations/0001_initial.py
    + Create model Question
    + Create model Choice

By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and
that you’d like the changes to be stored as a migration.

Migrations are how Django stores changes to your models (and thus your database schema) - they’re files on disk. You can read the
migration for your new model if you like; it’s the file polls/migrations/0001_initial.py. Don’t worry, you’re not expected to read 
them every time Django makes one, but they’re designed to be human-editable in case you want to manually tweak how Django changes things.

There’s a command that will run the migrations for you and manage your database schema automatically - that’s called migrate, and
we’ll come to it in a moment - but first, let’s see what SQL that migration would run. 
The sqlmigrate command takes migration names and returns their SQL:

$ python manage.py sqlmigrate polls 0001


*****
We use sqlmigrate polls 0001 instead of 0001_initial.py because:
Django identifies migrations by their number prefix (0001) within an app.
The suffix (_initial) is optional and ignored by the command.
You should see something similar to the following (we’ve reformatted it for readability):



If you try:
python manage.py sqlmigrate polls 0001_initial
it will give an error like:
Migration polls.0001_initial does not exist
because Django expects just the number (0001).


****

BEGIN;
--
-- Create model Question
--
CREATE TABLE "polls_question" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "question_text" varchar(200) NOT NULL,
    "pub_date" timestamp with time zone NOT NULL
);
--
-- Create model Choice
--
CREATE TABLE "polls_choice" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "choice_text" varchar(200) NOT NULL,
    "votes" integer NOT NULL,
    "question_id" bigint NOT NULL
);
ALTER TABLE "polls_choice"
  ADD CONSTRAINT "polls_choice_question_id_c5b4b260_fk_polls_question_id"
    FOREIGN KEY ("question_id")
    REFERENCES "polls_question" ("id")
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");

COMMIT;


Note the following:

>The exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.

>Table names are automatically generated by combining the name of the app (polls) and the lowercase name of the model – 
question and choice. (You can override this behavior.)

>Primary keys (IDs) are added automatically. (You can override this, too.)

>By convention, Django appends "_id" to the foreign key field name. (Yes, you can override this, as well.)

>The foreign key relationship is made explicit by a FOREIGN KEY constraint. Don’t worry about the DEFERRABLE parts; it’s telling PostgreSQL
to not enforce the foreign key until the end of the transaction.

>It’s tailored to the database you’re using, so database-specific field types such as auto_increment (MySQL), bigint PRIMARY KEY GENERATED
BY DEFAULT AS IDENTITY (PostgreSQL), or integer primary key autoincrement (SQLite) are handled for you automatically. Same goes for the
quoting of field names – e.g., using double quotes or single quotes.

>The sqlmigrate command doesn’t actually run the migration on your database - instead, it prints it to the screen so 
that you can see what SQL Django thinks is required. It’s useful for checking what Django is going to do or if you have database
administrators who require SQL scripts for changes.

If you’re interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.

Now, run migrate again to create those model tables in your database:


$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, polls, sessions
Running migrations:
  Rendering model states... DONE
  Applying polls.0001_initial... OK

The migrate command takes all the migrations that haven’t been applied (Django tracks which ones are applied using a special
table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes 
you made to your models with the schema in the database.

Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your
database or tables and make new ones - it specializes in upgrading your database live, without losing data. We’ll cover them in more
depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:



1. Change your models (in models.py).
2. Run python manage.py makemigrations to create migrations for those changes
3. Run python manage.py migrate to apply those changes to the database.


The reason that there are separate commands to make and apply migrations is because you’ll commit migrations to your version
control system and ship them with your app; they not only make your development easier, they’re also usable by other developers and in production.





----------
1. $ python manage.py makemigrations polls
Purpose:
This generates a migration file based on changes you've made to the models in your polls/models.py.
What it does:
Detects new or changed models (like creating a new Question or Choice model).
Creates a migration file like polls/migrations/0001_initial.py.
This file contains Python code that describes the changes to be made in the database.

Why:
So Django knows how to turn your Python model definitions into database schema (tables, fields, etc.).

2. $ python manage.py sqlmigrate polls 0001
Purpose:
Shows the raw SQL that Django will execute for the migration (but does not run it).
What it does:
Translates 0001_initial.py into the SQL commands needed to create the tables.
Why:
Just for inspection or learning — this is optional. It’s useful to:
Understand what SQL Django will run.
Debug or verify database changes before actually applying them.

3. $ python manage.py migrate
Purpose:
Actually applies the migration — i.e., it runs the SQL statements on the database.
What it does:
Executes the changes described in polls/migrations/0001_initial.py.
Creates tables, adds constraints, sets up initial schema.
Why:
To sync your database with your models so your app can store and retrieve data properly.

| Command                 | What it does                   | Required? |
| ----------------------- | ------------------------------ | --------- |
| `makemigrations polls`  | Prepares the migration file    | Yes       |
| `sqlmigrate polls 0001` | Shows the SQL that will be run | No        |
| `migrate`               | Actually changes the database  | Yes       |
You must run makemigrations and migrate. sqlmigrate is optional and for learning/debugging.




---------




Playing with the API

Now, let’s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:

$ python manage.py shell

We’re using this instead of simply typing “python”, because manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives Django 
the Python import path to your mysite/settings.py file. By default, the shell command automatically
imports the models from your INSTALLED_APPS.

Once you’re in the shell, explore the database API:

# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>






----------

why objects between Question.objects.all()


The objects part in Question.objects.all() is a core part of Django’s ORM (Object-Relational Mapping) system.

Why do we use objects?
Because objects is the default manager that Django provides for every model. It’s how you access the database 
through your model.

What is a "manager"?
A manager in Django is a Python object through which database query operations are provided to Django models.
By default, every model class gets a manager named objects. So when you write:
Question.objects.all()

you're saying:
"Question is my model class."
objects is the manager for that model.
.all() is a query method that asks: “Get all rows in the database table for this model.”

What does it look like under the hood?
This:
Question.objects.all()
is conceptually like:
Question._default_manager.all()
Where _default_manager is set to the manager named objects.

The objects manager gives you access to the queryset API, like:
all()
filter(...)
get(...)
create(...)
exclude(...)
and many more.

Can we change objects to something else?
Yes, you can define custom managers with custom names. For example:

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    my_query = models.Manager()

Then you'd use:
Question.my_query.all()
But unless you need special logic, stick to the default:
Question.objects.all()


| Part     | Meaning                                              |
| -------- | ---------------------------------------------------- |
| Question | Your Django model class                              |
| objects  | The default manager — interface to run DB queries    |
| .all()   | A method that returns all rows for the model's table |


----------


The __str__(self) method is indeed pure Python, not Django-specific. It’s one of Python's 
"magic methods" (like __init__, __len__, etc.) and is used to define what happens when you
convert an object to a string using str() or print().

Example: A Pure Python Class Using __str__

class Dog:
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def __str__(self):
        return f"{self.name} is a {self.breed}"

# Creating an object
my_dog = Dog("Buddy", "Golden Retriever")

# Printing the object
print(my_dog)  # Output: Buddy is a Golden Retriever
Without __str__, this would print something like:
<__main__.Dog object at 0x7f8c123abcde>
Which is not helpful.

How it works behind the scenes
str(my_dog)
automatically calls:
my_dog.__str__()

So defining __str__() lets you customize string representations of your objects.



----------




Wait a minute. <Question: Question object (1)> isn’t a helpful representation of this object. Let’s fix that by editing the
Question model (in the polls/models.py file) and adding a __str__() method to both Question and Choice:




polls/models.py

from django.db import models


class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text


class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text


It’s important to add __str__() methods to your models, not only for your own convenience when dealing with the interactive prompt, 
but also because objects’ representations are used throughout Django’s automatically-generated admin.


Let’s also add a custom method to this model:

polls/models.py

import datetime

from django.db import models
from django.utils import timezone


class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)


Note the addition of import datetime and from django.utils import timezone, to reference Python’s standard datetime module and Django’s 
time-zone-related utilities in django.utils.timezone, respectively. If you aren’t familiar with time zone handling in Python, 
you can learn more in the time zone support docs.

Save these changes and start a new Python interactive shell by running python manage.py shell again:

# Make sure our __str__() addition worked.
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith="What")
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Request an ID that doesn't exist, this will raise an exception.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
>>> Question.objects.get(pk=1)
<Question: What's up?>

# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set (defined as "choice_set") to hold the "other side" of a ForeignKey
# relation (e.g. a question's choice) which can be accessed via the API.
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text="Not much", votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text="The sky", votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text="Just hacking again", votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith="Just hacking")
>>> c.delete()
For more information on model relations, see Accessing related objects. For more on how to use double underscores to perform field lookups via the API, 
see Field lookups. For full details on the database API, see our Database API reference.



****

explain why the name _set? how does it work?

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

In this case:
Choice has a ForeignKey to Question.
Django automatically creates a reverse relationship on Question called choice_set.

So:
q=Question.objects.get(pk=1)
q.choice_set.all()
means:
“Get all choices related to this question.”
It returns a QuerySet of Choice objects linked to q.


You can customize this name
If you don't like choice_set, you can rename it using the related_name parameter:
question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name="choices")
Then you’d write:
q.choices.all()



By default, Django creates a reverse accessor called:
<lowercase model name>_set
So here:
Choice is the model name.
The reverse relationship on Question becomes:
question_instance.choice_set



Use the Django shell to inspect it
Open the shell:
python manage.py shell
Try this:
from polls.models import Question

q = Question.objects.first()

# Check reverse relationships
dir(q)
You’ll see 'choice_set' in the list of attributes and methods.

You can also do:
q._meta.get_fields()
And look for something like:
<ManyToOneRel: polls.Choice>
That’s the reverse relationship Django created for you.





exaplin the difference between django orm and sql?

Django ORM:
q = Question.objects.get(pk=1)
Equivalent SQL:
SELECT * FROM polls_question WHERE id = 1;
Django uses id as the default primary key, so pk=1 → id=1.



Django ORM:
q.choice_set.all()
Equivalent SQL:
SELECT * FROM polls_choice WHERE question_id = 1;
Django uses the foreign key question_id in the polls_choice table to link back to polls_question.


Django ORM:
q.choice_set.create(choice_text="Not much", votes=0)
Equivalent SQL:
INSERT INTO polls_choice (question_id, choice_text, votes)
VALUES (1, 'Not much', 0);
Django automatically sets the question_id to the primary key of q.




How Foreign Keys Work in SQL
If you wrote the SQL to create these tables manually, it might look like:

CREATE TABLE polls_question (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_text VARCHAR(200),
    pub_date DATETIME
);

CREATE TABLE polls_choice (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_id INTEGER,
    choice_text VARCHAR(200),
    votes INTEGER DEFAULT 0,
    FOREIGN KEY (question_id) REFERENCES polls_question(id)
);
The question_id column in polls_choice links each choice to a specific question.
This is how q.choice_set.all() knows what to query.




how does primary key work?

By default, Django adds an id field to every model:
If you define a model like this:

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField()

Django will automatically create an id field like:
class Question(models.Model):
    id = models.AutoField(primary_key=True)  # automatically added
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField()
That means:
It's an integer field
It auto-increments
It's the primary key


Want to confirm it?
You can run:
python manage.py sqlmigrate polls 0001
And you’ll see SQL like:
CREATE TABLE polls_question (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    question_text VARCHAR(200),
    pub_date DATETIME NOT NULL
);
Even though you never wrote id in your Python code, Django added it for you.


Can you override it?
Yes. If you want to use a custom primary key (like a UUID or a slug), you can define it yourself:
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
But if you don’t define any primary key, Django will add id for you.

****



Introducing the Django Admin

https://docs.djangoproject.com/en/5.2/intro/tutorial02/

::Philosophy::
Generating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn’t require much creativity. For that reason, 
Django entirely automates creation of admin interfaces for models.

Django was written in a newsroom environment, with a very clear separation between “content publishers” and the “public” site. Site managers use the system
to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified 
interface for site administrators to edit content.
The admin isn’t intended to be used by site visitors. It’s for site managers.



Creating an admin user

First we’ll need to create a user who can login to the admin site. Run the following command:

$ python manage.py createsuperuser


Enter your desired username and press enter.

Username: admin
You will then be prompted for your desired email address:

Email address: admin@example.com

The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.

Password: **********
Password (again): *********
Superuser created successfully.



Start the development server

The Django admin site is activated by default. Let’s start the development server and explore it.

If the server is not running start it like so:

$ python manage.py runserver

Now, open a web browser and go to “/admin/” on your local domain – e.g., http://127.0.0.1:8000/admin/. You should see the admin’s login screen:


Since translation is turned on by default, if you set LANGUAGE_CODE, the login screen will be displayed in the given language
(if Django has appropriate translations).


Enter the admin site

Now, try logging in with the superuser account you created in the previous step. You should see the Django admin index page:

You should see a few types of editable content: groups and users. They are provided by django.contrib.auth, the authentication framework shipped by Django.




Make the poll app modifiable in the admin

But where’s our poll app? It’s not displayed on the admin index page.
Only one more thing to do: we need to tell the admin that Question objects have an admin interface. To do this, open the polls/admin.py file, 
and edit it to look like this:

polls/admin.py

from django.contrib import admin
from .models import Question

admin.site.register(Question)



Explore the free admin functionality

Now that we’ve registered Question, Django knows that it should be displayed on the admin index page:

Click “Questions”. Now you’re at the “change list” page for questions. This page displays all the questions in the database and lets you choose one 
to change it. There’s the “What’s up?” question we created earlier:

Click the “What’s up?” question to edit it:


Things to note here:
>The form is automatically generated from the Question model.
>The different model field types (DateTimeField, CharField) correspond to the appropriate HTML input widget. Each type of
field knows how to display itself in the Django admin.
>Each DateTimeField gets free JavaScript shortcuts. Dates get a “Today” shortcut and calendar popup, and times get a “Now” shortcut
and a convenient popup that lists commonly entered times.

The bottom part of the page gives you a couple of options:
>Save – Saves changes and returns to the change-list page for this type of object.
>Save and continue editing – Saves changes and reloads the admin page for this object.
>Save and add another – Saves changes and loads a new, blank form for this type of object.
>Delete – Displays a delete confirmation page.

If the value of “Date published” doesn’t match the time when you created the question in Tutorial 1, it probably means you forgot to set the
correct value for the TIME_ZONE setting. Change it, reload the page and check that the correct value appears.

Change the “Date published” by clicking the “Today” and “Now” shortcuts. Then click “Save and continue editing.” Then click “History” in 
the upper right. You’ll see a page listing all changes made to this object via the Django admin, with the 
timestamp and username of the person who made the change:

