Thw most basic model for (imperative)programming is sometimes called sequence, selection, iteration.

1. Sequence: Performing operations one at a time in a specified order.
2. Selection: Using conditional statements such as if to select which
operations to execute.
3. Iteration: Repeating some operations using loops or recursion.
____________________________
expressions and evaluation:
__________________________
python can do simple arithmetic. 2+2 is a simple arithmatic expression. 
expression get evaluated and produces a value. 
they dont always have to produce numericle value, it can also evalte to boolean value. 
_______________________________
variables, typpes, and state:
______________________________

a variable, is created by aan assignment statement. 
var_name = some_val
The right side of = is an expression that gets evaluated first. Only later does the assignment happen. If the left side of the
assignment is a variable name that already exist, it is overwritten. If it doesn’t already exist, it is created.

Variables are just names. Every name is associated with some piece of
data, called an object.
The name is a string of characters and it is mapped to an object

Every object has a type. The type often determines what you can do
with the variable. The so-called atomic types in Python are integers,
floats, and booleans, but any interesting program will contain variables of
many other types as well. You can inspect the type of a variable using the
type() function. In Python, the word type and class mean the same thing
(most of the time)


x = 5
y = 3.2
z = True
print("x has type", type(x))
print("y has type", type(y))
print("z has type", type(z))
x has type <class ’int’>
y has type <class ’float’>
z has type <class ’bool’>



you should think of an object as having three things: an identity, a type,
and a value. Its identity cannot change. It can be used to see if two objects
are actually the same object with the is keyword. For example, consider
the following code.

x = [1, 2, 3]
y = x 
'''y = x assigns the reference of the list object [1, 2, 3] (which x points to) to the variable y. 
Now both x and y point to the same object in memory'''
z = [1, 2, 3]
print(x is y) #True
print(x is z) #false
print(x == z) #true


An object cannot change its identity. In Python, you also cannot change
the type of an object. You can reassign a variable to point to different
object of a different type, but that’s not the same thing. There are several
functions that may seem to be changing the types of objects, but they are
really just creating a new object from the old.

x = 2
print("x =", x) #x = 2
print("float(x) =", float(x)) #float(x) = 2.0
print("x still has type", type(x)) #x still has type <class ’int’>
print("Overwriting x.") #Overwriting x.
x = float(x)
print("Now, x has type", type(x)) #Now, x has type <class ’float’>


thisworks = float("inf") //postive infiinity
print("float(\’inf\’) has type", type(thisworks)) //float(’inf’) has type <class ’float’>
infinity_plus_one = float(’inf’) + 1 //inf only.
thisworks = float("ioasodsanf") //cannot convert the string to the float. 


collections:

The next five most important types in Python are strings, lists, tuples,
dictionaries, and sets. 
__________
Strings:
__________
Strings are sequences of characters and can be used to store text of all kinds.
you can concatenate strings to create a new string using the plus sign. 
You can also access individual characters using square brackets and an index.
You can often turn other objects into strings.

s = "Hello, "
t = "World."
u = s + t
print(type(u)) #<class 'str'>
print(u) Hello, World
print(u[9]) r
n = str(9876) 
print(n[2])
__________
Lists:
__________
Lists are ordered sequences of objects. The objects do not have to be the
same type. They are indicated by square brackets and the elements of the
list are separated by commas.
You can append an item to the end of a list
L by using the command L.append(newitem). It is possible to index into a
list exactly as we did with strings.

L=[1,2,3,4,5,6]
print(type(L)) #<class ’list’>
L.append(100) #[1,2,3,4,5,6,100]
print("The first item is", L[0]) #1
print("The second item is", L[1]) #2
print("The last item is", L[-1]) #100
print("The second to last item is", L[-2] #6

ou can also overwrite values in a list using regular assignment statements.
L[2] = ’skip’
L[3] = ’a’
L[4] = ’few’
L[-2] = 99
print(L) [1, 2, 'skip', 'a', 'few', 99, 100]
print(*L) #1 2 skip a few 99 100
_____________
Tuples:
__________
Tuples are also ordered sequences of objects, but unlike lists, they are
immutable. You can access the items but you can’t change what items are
in the tuple after you create it. For example, trying to append raises an
exception.

t = (1, 2, "skip a few", 99, 100)
print(type(t)) #<class ’tuple’>
print(t) #(1, 2, ’skip a few’, 99, 100)
print(t[4]) #100

Here’s what happens when you try to append.
t.append(101)
Traceback (most recent call last):
File "mdi8w4v9ms", line 3, in <module>
t.append(101)
AttributeError: ’tuple’ object has no attribute ’append’

Here’s what happens when you try to assign a value to an item.
t[4] = 99.5
Traceback (most recent call last):
File "me1lm8cv3r", line 3, in <module>
t[4] = 99.5
TypeError: ’tuple’ object does not support item assignment

Note that it would be the same for strings.
s = ’ooooooooo’
s[4] = ’x’

Traceback (most recent call last):
File "x12wl1x2nf", line 4, in <module>
s[4] = ’x’
TypeError: ’str’ object does not support item assignment.

you can update the tuple by  converting it the list or creatign a new tuple with the value "orange", and add that tuple:

thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y
print(thistuple) #('apple', 'banana', 'cherry', 'orange')

____________________
Dictionaries (dict)
___________________
Dictionaries store key-value pairs. That is, every element of a dictionary
has two parts, a key and a value. If you have the key, you can get the
value. The name comes from the idea that in a real dictionary (book), a
word (the key) allows you to find its definition (the value).

d = dict()
d[5] = ’five’
d[2] = ’two’
d[’pi’] = 3.1 415926
print(d) #{5: ’five’, 2: ’two’, ’pi’: 3.1415926}
print(d[’pi’]) #3.1415926

Keys can be different types, but they must be immutable types such as
atomic types, tuples, or strings. but they must be immutable types such as
atomic types, tuples, or strings. The reason for this requirement is that we
will determine where to store something using the key. If the key changes,
we will look in the wrong place when it’s time to look it up again.

Dictionaries are also known as maps, mappings, or hash tables. We
will go deep into how these are constructed later in the course. A dictionary
doesn’t have a fixed order.
If you assign to a key that’s not in the dictionary, it simply creates a
new item. If you try to access a key that’s not in the dictionary, you will
get a KeyError.
D = {’a’: ’one’, ’b’: ’two’}
D[’c’]
Traceback (most recent call last):
File "ln2yrzw6yb", line 2, in <module>
D[’c’]
KeyError: ’c’

_______________
sets
___________
They are collections of
objects without duplicates. We use curly braces to denote them and commas
to separate elements. a set has no fixed ordering.
Be careful that empty braces indicates an empty dictionary and not
an empty set.
Notice that the duplicates have no effect on the value as its printed.

s = {2,1}
print(type(s))
s.add(3)
s.add(2)
s.add(2)
s.add(2)
print(s)
<class ’set’>
{1, 2, 3}

Be careful, is an empty dictionary. If you want an empty set, you would
write set().
_________________________________________
some common things to do with collections>
____________________________________________

You can find the number of elements in the collection (the length) using
len.
a = "a string"
b = ["my", "second", "favorite", "list"]
c = (1, "tuple")
d = {’a’: ’b’, ’b’: 2, ’c’: False}
e = {1,2,3,4,4,4,4,2,2,2,1}

print(len(a), len(b), len(c), len(d), len(e)) # 8 4 2 3 4
print(e) #{1,2,3,4}

For the sequential types (lists, tuples, and strings), you can slice a subsequence of indices using square brackets and a colon as in the following
examples. 

The range of indices is half open in that the slice will start with
the first index and proceed up to but not including the last index. Negative
indices count backwards from the end.

Important: slicing a sequence creates a new object. That means a big
slice will do a lot of copying. It’s really easy to write inefficient code this
way.

a = "a string"
b = ["my", "second", "favorite", "list"]
c = (1, 2,3,"tuple")
print(a[3:7]) #trin
print(a[1:-2]) #stri
print(b[1:]) #[’second’, ’favorite’, ’list’]
print(c[:2]) #(1, 2)

_____________________________
Iterating over a collection
_____________________________

It is very common to want to loop over a collection. The pythonic way of
doing iteration is with a for loop.
The syntax is shown in the following examples.

mylist = [1,3,5]
mytuple = (1, 2, ’skip a few’, 99, 100)
myset = {’a’, ’b’, ’z’}
mystring = ’abracadabra’
mydict = {’a’: 96, ’b’: 97, ’c’: 98}

for item in mylist:
   print(item)
for item in mytuple:
   print(item)
for element in myset:
   print(element)
for character in mystring
  print(character)
for key in mydict:
  print(key)
for key, value in mydict.items():
   print(key, value)
for value in mydict.values():
   print(value)

There is a class called range to represent a sequence of numbers that
behaves like a collection. It is often used in for loops as follows.

for i in range(10):
    j = 10 * i + 1
    print(j, end=’ ’)

1 11 21 31 41 51 61 71 81 91

_______________________________
Other Forms of Control Flow
_______________________________

Control flow refers to the commands in a language that affect the order
in which operations are executed. The for loops from the previous section
is a classic examples of this. The other basic forms of control flow are if
statements, while loops, try blocks, and function calls.

An if statement

in its simplest form evaluates an expression and tries to
interpret it as a boolean. This expression is referred to as a predicate. If the
predicate evaluates to True, then a block of code is executed. Otherwise,
the code is not executed. This is the selection of sequence, selection, and
iteration. Here is an example.

if 3 + 3 < 7:
     print("This should be printed.") #This should be printed
if 2 ** 8 != 256:
     print("This should not be printed.") #This should be printed

A while loop 

also has a predicate. It is evaluated at the top of a block of
code. If it evaluates to True, then the block is executed and then it repeats.
The repetition continues until the predicate evaluate to False or until the
code reaches a break statement.

x = 1
while x < 128:
   print(x, end=’ ’) #   1 2 4 8 16 32 64
   x = x * 2


A try block

is the way to catch and recover from errors while a program
is running. If you have some code that may cause an error, but you don’t
want it to crash your program, you can put the code in a try block. Then,
you can catch the error (also known as an exception) and deal with it. A
simple example might be a case where you want to convert some number
to a float. Many types of objects can be converted to float, but many
cannot. If we simply try to do the conversion and it works, everything is
fine. Otherwise, if there is a ValueError, we can do something else instead.

x = "not a number"
try: 
   f = float(x)
except ValueError:
   print("You can’t do that!") #You can’t do that!


A function 

also changes the control flow. In Python, you define a function
with the def keyword. This keyword creates an object to store the block
of code. The parameters for the function are listed in parentheses after the
function name. The return statement causes the control flow to revert back
to where the function was called and determines the value of the function
call.

def foo(x, y):
    return 8 * x + y

print(foo(2, 1)) #17
print(foo("Na", " batman")) #NaNaNaNaNaNaNaNa batma

Notice that there is no requirement that we specify the types of objects
a function expects for its arguments. This is very convenient, because it
means that we can use the same function to operate on different types of
objects (as in the example above). If we define a function twice, even if we
change the parameters, the first will be overwritten by the second. This is
exactly the same as assigning to a variable twice. The name of a function is
just a name; it refers to an object (the function). Functions can be treated
like any other object.

def foo(x):
    return x + 2

def bar(somefunction): 
    return somefunction(4)

print(bar(foo)) #6
somevariable = foo
print(bar(somevariable)) #6

_____________________
Modules and Imports
_____________________

As we start to write more complex programs, it starts to make sense to break
up the code across several files. A single .py file is called a module. You
can import one module into another using the import keyword. The name
of a module, by default, is the name of the file (without the .py extension).

When we import a module, the code in that module is executed.Usually, this
should be limited to defining some functions and classes, but can technically
include anything. The module also has a namespace in which these functions
and classes are defined.

For example, suppose we have the following files.

# File: twofunctions.py
def f(x):
   return 2 * x + 3

def g(x):
   return x ** 2 - 1

# File: theimporter.py
import twofunctions

def f(x):
return x - 1

print(twofunctions.f(1)) # Will print 5
print(f(1)) # Will print 0
print(twofunctions.g(4)) # Will print 1


The import brings the module name into the current namespace. I can
then use it to identify the functions from the module.

There is very little magic in an import. In some sense, it’s just telling the
current program about the results of another program. Because the import
(usually) results in the module being executed, 
it’s good practice to change
the behavior of a script depending on whether it is being run directly, or
being run as part of an import. 
It is possible to check by looking at the
name attribute of the module. If you run the module directly (i.e. as a
script), then the name variable is automatically set to main . If the
module is being imported, the name defaults to the module name. This
is easily seen from the following experiment.

# File: mymodule.py
print("The name of this module is", __name__) //The name of this module is __main__

# File: theimporter.py
import mymodule
print("Notice that it will print something different when imported?")

here is how we use the name attribute to check how the program is being run.

def somefunction():
    print("Real important stuff here.")

if __name__ == ’__main__’:
    somefunction()

Real important stuff here.

In the preceding code, the message is printed only when the module is
executed as a script. It is not printed (i.e. the somefunction function is
not called) if the module is being imported. This is a very common Python
idiom.

1. You can import just a particular name or collection of names from
a module: from modulename import thethingIwanted. This brings
the new name thethingIwanted into the current namespace. It doesn’t
need to be preceded by modulename and a dot

2. You canimport all the names from the module into the current namespace: from modulename import *. If you do this, every name defined
in the module will be accessible in the current namespace. It doesn’t
need to be preceded by modulename and a dot. Although easy to write
and fast for many things, this is generally frowned upon as you often
won’t know exactly what names you are importing when you do this.

3.You can rename module after importing it: import numpy as np.
This allows you to use a different name to refer to the objects of the
module. In this example, I can write np.array instead of numpy.array.
The most common reason to do this is to have a shorter name. The
other, more fundamental use is to avoid naming conflicts


