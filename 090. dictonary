To create an empty dictionary, first create a variable name which will be the name of the dictionary.

Then, assign the variable to an empty set of curly braces, {}.

#create an empty dictionary
my_dictionary = {}

print(my_dictionary)
print(type(my_dictionary)) #to check the data type use the type() function

#output
#{}
#<class 'dict'>


to create a dictionary with items, you need to include key-value pairs inside the curly braces.
The general syntax for this is the following:

dictionary_name = {key: value}

example:

#create a dictionary
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print(my_information) #check data type
print(type(my_information))

#output

#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
#<class 'dict'>


Another way of creating dictioanry;

Say that you want to create a dictionary with items using the dict() function this time instead.

#create a dictionary with dict()
my_information = dict({'name': 'Dionysia' ,'age': 28,'location': 'Athens'})

print(my_information)
print(type(my_information)) #check data type

#output

#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
#<class 'dict'>


fromkeys() method of creating dictioanry

It takes a predefined sequence of items as an argument and returns a new dictionary with the items in the sequence set as the dictionary's specified keys.
You can optionally set a value for all the keys, but by default the value for the keys will be None.

SYNTAX: dictionary_name = dict.fromkeys(sequence,value)

Let's see an example of creating a dictionary using fromkeys() without setting a value for all the keys:

cities = ('Paris','Athens', 'Madrid') #create sequence of strings
my_dictionary = dict.fromkeys(cities) #create the dictionary, `my_dictionary`, using the fromkeys() method
print(my_dictionary)

O/P
#{'Paris': None, 'Athens': None, 'Madrid': None}

another example:

cities = ('Paris','Athens', 'Madrid') #create a sequence of string 
continent = 'Europe' #create a single value
my_dictionary = dict.fromkeys(cities,continent)
print(my_dictionary)

#output
{'Paris': 'Europe', 'Athens': 'Europe', 'Madrid': 'Europe'}

anoher example:

my_dictionary = {True: "True",  1: 1,  1.1: 1.1, "one": 1, "languages": ["Python"]}
print(my_dictionary)

#output
#{True: 1, 1.1: 1.1, 'one': 1, 'languages': ['Python']}

The keys in the dictionary are Boolean, integer, floating point number, and string data types, which are all acceptable.
If you try to create a key which is of a mutable type you'll get an error - specifically the error will be a TypeError.

my_dictionary = {["Python"]: "languages"}
print(my_dictionary)

#output
#line 1, in <module>
#    my_dictionary = {["Python"]: "languages"}
#TypeError: unhashable type: 'list'
#{'Paris': 'Europe', 'Athens': 'Europe', 'Madrid': 'Europe'}

____________________________________________________________________________________________
How to Find the Number of key-value Pairs Contained in a Dictionary and how to view all key-value pairs in Python
________________________________________________________________________________________

The len() function returns the total length of the object that is passed as an argument.
When a dictionary is passed as an argument to the function, it returns the total number of key-value pairs enclosed in the dictionary.

This is how you calcualte the number of key-value pairs using len():

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print(len(my_information))

#output
3

How to View All key-value Pairs Contained in a Dictionary in Python : To view every key-value pair that is inside a dictionary,
use the built-in items() method:

year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}
print(year_of_creation.items())

output
dict_items([('Python', 1993), ('JavaScript', 1995), ('HTML', 1993)])

The items() method returns a list of tuples that contains the key-value pairs that are inside the dictionary.

How to View All keys Contained in a Dictionary in Python: T see all of the keys that are inside a dictionary, use the built-in keys() method:

year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}
print(year_of_creation.keys())

output
dict_keys(['Python', 'JavaScript', 'HTML'])

The keys() method returns a list that contains only the keys that are inside the dictionary.

How to View All values Contained in a Dictionary in Python? To see all of the values that are inside a 
dictionary, use the built-in values() method:

year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}
print(year_of_creation.values())

output
dict_values([1993, 1995, 1993])

The values() method returns a list that contains only the values that are inside the dictionary.

How to Access Individual Items in A Dictionary in Python

When working with lists, you access list items by mentioning the list name and using square bracket notation. In the square brackets 
you specify the item's index number (or position).

You can't do exactly the same with dictionaries.

When working with dictionaries, you can't access an element by referencing its index number, since dictionaries contain key-value pairs.
Instead, you access the item by using the dictionary name and square bracket notation, but this time in the square brackets you specify a key.
Each key corresponds with a specific value, so you mention the key that is associated with the value you want to access.

The general syntax to do so is the following:
dictionary_name[key]

example:

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print(my_information['age']) #access the value associated with the 'age' key

output
28

What happens though when you try to access a key that doesn't exist in the dictionary?

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print(my_information['job']) #try to access the value associated with the 'job' key

output
#line 4, in <module>
#    print(my_information['job'])
#KeyError: 'job'

It results in a KeyError since there is no such key in the dictionary.
One way to avoid this from happening is to first search to see if the key is in the dictionary in the first place.
You do this by using the in keyword which returns a Boolean value. It returns True if the key is in the dictionary and False if it isn't.

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print('job' in my_information) #search for the 'job' key

output
False

Another way around this is to access items in the dictionary by using the get() method.
You pass the key you're looking for as an argument and get() returns the value that corresponds with that key.

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
print(my_information.get('job')) #try to access the 'job' key using the get() method

#output
#None

As you notice, when you are searching for a key that does not exist, by default get() returns None instead of a KeyError.
If instead of showing that default None value you want to show a different message when a key does not exist, you can customise get() by
providing a different value.

You do so by passing the new value as the second optional argument to the get() method:

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

print(my_information.get('job', 'This value does not exist')) #try to access the 'job' key using the get() method

#output
#This value does not exist
Now when you are searching for a key and it is not contained in the dictionary, you will see the message This value does not exist appear on the console.

_______________________________________------------------
How to Modify A Dictionary in Python
_________________________________________------------------
Dictionaries are mutable, which means they are changeable. They can grow and shrink throughout the life of the program.
New items can be added, already existing items can be updated with new values, and items can be deleted.

How to Add New Items to A Dictionary in Python
To add a key-value pair to a dictionary, use square bracket notation.

The general syntax to do so is the following:
dictionary_name[key] = value

First, specify the name of the dictionary. Then, in square brackets, create a key and assign it a value.

Say you are starting out with an empty dictionary:

my_dictionary = {}
my_dictionary['name'] = "John Doe" #add a key-value pair to the empty dictionary
print(my_dictionary)

#output
#{'name': 'John Doe'}

Here is how you would add another new key-value pair:

my_dictionary = {}
my_dictionary['name'] = "John Doe" #add a key-value pair to the empty dictionary
my_dictionary['age'] = 34 # add another  key-value pair
print(my_dictionary)

#output
#{'name': 'John Doe', 'age': 34}

Keep in mind that if the key you are trying to add already exists in that dictionary and you are assigning it a different value, 
the key will end up being updated.

Remember that keys need to be unique.

my_dictionary = {'name': "John Doe", 'age':34}
print(my_dictionary)
my_dictionary['age'] = 46 #try to create a an 'age' key and assign it a value and the 'age' key already exists
#the value of 'age' will now be updated
print(my_dictionary)

#output
#{'name': 'John Doe', 'age': 34}
#{'name': 'John Doe', 'age': 46}

If you want to prevent changing the value of an already existing key by accident, you might want to check if the key you are trying to
add is already in the dictionary.

You do this by using the in keyword as we discussed above:

my_dictionary = {'name': "John Doe", 'age':34}
print('age' in my_dictionary) #I want to add an `age` key. Before I do so, I check to see if it already exists

#output
#True

__________________________________________________
How to Update Items in A Dictionary in Python
_________________________________________________
Updating items in a dictionary works in a similar way to adding items to a dictionary.
When you know you want to update one existing key's value, use the following general syntax you saw in the previous section:

dictionary_name[existing_key] = new_value

my_dictionary = {'name': "John Doe", 'age':34}
my_dictionary['age'] = 46
print(my_dictionary)

#output
#{'name': 'John Doe', 'age': 46}

To update a dictionary, you can also use the built-in update() method.
This method is particularly helpful when you want to update more than one value inside a dictionary at the same time.
Say you want to update the name and age key in my_dictionary, and add a new key, occupation:

my_dictionary = {'name': "John Doe", 'age':34}
my_dictionary.update(name= 'Mike Green', age = 46, occupation = "software developer")
print(my_dictionary)

#output
#{'name': 'Mike Green', 'age': 46, 'occupation': 'software developer'}

The update() method takes a tuple of key-value pairs.
The keys that already existed were updated with the new values that were assigned, and a new key-value pair was added.
The update() method is also useful when you want to add the contents of one dictionary into another.

Say you have one dictionary, numbers, and a second dictionary, more_numbers.
If you want to merge the contents of more_numbers with the contents of numbers, use the update() method.
All the key-value pairs contained in more_numbers will be added to the end of the numbers dictionary.

numbers = {'one': 1, 'two': 2, 'three': 3}
more_numbers = {'four': 4, 'five': 5, 'six': 6}

#update 'numbers' dictionary
#you update it by adding the contents of another dictionary, 'more_numbers',
#to the end of it
numbers.update(more_numbers)
print(numbers)

#output
#{'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6}

_________________________________________________
How to Delete Items from A Dictionary in Python
_______________________________________________
One of the ways to delete a specific key and its associated value from a dictionary is by using the del keyword.
The syntax to do so is the following:
del dictionary_name[key]

For example, this is how you would delete the location key from the my_information dictionary:

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
del my_information['location']
print(my_information)

#output
#{'name': 'Dionysia', 'age': 28}

If you want to remove a key, but would also like to save that removed value, use the built-in pop() method.
The pop() method removes but also returns the key you specify. This way, you can store the removed value
in a variable for later use or retrieval.

You pass the key you want to remove as an argument to the method.
Here is the general syntax to do that:

dictionary_name.pop(key)

To remove the location key from the example above, but this time using the pop() method and 
saving the value associated with the key to a variable, do the following:

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
city = my_information.pop('location')
print(my_information)
print(city)

#output
#{'name': 'Dionysia', 'age': 28}
#Athens

If you specify a key that does not exist in the dictionary you will get a KeyError error message:

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
my_information.pop('occupation')
print(my_information)

#output
#line 3, in <module>
#   my_information.pop('occupation')
#KeyError: 'occupation'
A way around this is to pass a second argument to the pop() method.

By including the second argument there would be no error. Instead, there would be a silent fail if the key didn't exist, and the
dictionary would remain unchanged.

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
my_information.pop('occupation','Not found')
print(my_information)

#output
#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

The pop() method removes a specific key and its associated value – but what if you only want to delete the last key-value pair from a dictionary?
For that, use the built-in popitem() method instead.
This is general syntax for the popitem() method:

dictionary_name.popitem()

The popitem() method takes no arguments, but removes and returns the last key-value pair from a dictionary.

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
popped_item = my_information.popitem()
print(my_information)
print(popped_item)

#output
#{'name': 'Dionysia', 'age': 28}
#('location', 'Athens')

Lastly, if you want to delete all key-value pairs from a dictionary, use the built-in clear() method.

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
my_information.clear()
print(my_information)

#output
#{}

Using this method will leave you with an empty dictionary.

-_________________________________________________________________
dictionary.setdefault(key, default_value)
_________________________________________________________

Returns the value for key if key is in the dictionary, else inserts key with a value of default and returns default.

value = my_dict.setdefault('a', 0)

my_dict = {'a': 1, 'b': 2}
value = my_dict.setdefault('a', 100)
print(value)  # Output: 1
print(my_dict)  # Output: {'a': 1, 'b': 2}

another example

my_dict = {'a': 1, 'b': 2}
value = my_dict.setdefault('c', 100)
print(value)  # Output: 100
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 100}

Practical Example

Let's consider a scenario where we want to count the occurrences of each character in a string:

text = "hello world"
char_count = {}
for char in text:
    char_count[char] = char_count.setdefault(char, 0) + 1
print(char_count)
# Output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}

___________________________
dictionary get
___________________________
dict.get(key, default=None):

Returns the value for key if key is in the dictionary, else default.
value = my_dict.get('a', 0)

SUMMARY:

# Creating a dictionary
my_dict = {'a': 1, 'b': 2}

# Accessing a value with get
print(my_dict.get('a'))  # Output: 1
print(my_dict.get('c', 0))  # Output: 0

# Adding a new key with setdefault
my_dict.setdefault('c', 3)
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}

# Updating the dictionary
my_dict.update({'d': 4, 'e': 5})
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

# Removing an item
value = my_dict.pop('a')
print(value)  # Output: 1
print(my_dict)  # Output: {'b': 2, 'c': 3, 'd': 4, 'e': 5}

# Removing an arbitrary item
key, value = my_dict.popitem()
print(key, value)  # Output: ('e', 5)
print(my_dict)  # Output: {'b': 2, 'c': 3, 'd': 4}

# Iterating over keys, values, and items
for key in my_dict.keys():
    print(key)  # Output: b, c, d

for value in my_dict.values():
    print(value)  # Output: 2, 3, 4

for key, value in my_dict.items():
    print(key, value)  # Output: b 2, c 3, d 4

# Copying the dictionary
new_dict = my_dict.copy()
print(new_dict)  # Output: {'b': 2, 'c': 3, 'd': 4}

# Clearing the dictionary
my_dict.clear()
print(my_dict)  # Output: {}

