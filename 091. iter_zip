An iterator is an object that allows you to traverse through all the elements of a collection, such as a list or a string, one element at a time.
Iterators are a fundamental part of Python and its ability to handle sequences and collections in a memory-efficient way.

Key Concepts of Iterators
Iterable:
An object is called iterable if it can return an iterator.
Examples of iterables include lists, tuples, strings, dictionaries, and sets.

Iterator:
An iterator is an object that represents a stream of data; it returns one element at a time when next() is called on it.
An iterator in Python must implement two methods: __iter__() and __next__() 

Creating an Iterator:
You can get an iterator from any iterable by using the iter() function.


numbers = [1, 2, 3, 4, 5]
numbers_iterator = iter(numbers) # Get an iterator from the list
print(next(numbers_iterator))  # Output: 1
print(next(numbers_iterator))  # Output: 2
print(next(numbers_iterator))  # Output: 3
# Continue until all elements are accessed

Custom Iterator Example:

You can create a custom iterator by defining a class with __iter__ and __next__ methods.

class MyRange:
    def __init__(self, start, end):
        self.current = start
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.current < self.end:
            num = self.current
            self.current += 1
            return num
        else:
            raise StopIteration

# Usage
my_range = MyRange(1, 5)
print(MyRange.__iter__) #object at 1234234
for num in my_range:
    print(num)  # Output: 1 2 3 4

MORE EXAMPLE:

iter(s) returns an iterator for S.

[iter(s)]*n makes a list of n times the same iterator for s.

Example: [[iter(s)]*3] = ([iter(s), iter(s), iter(s)])

ADVICE: It's not three copies of the same iterator, it's three times the same iterator object. Really:

for part in zip(*[iter(S)] * N):
It is equivalent to:

it = iter(s)
for part in zip(it, it, it):
❹*[] unpack a list:

Example: print(*[1,2,3,4]) = print(1,2,3,4)

❺zip make an iterator that aggregates elements from each of the iterables.

Example:

>>>x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> zipped = zip(x, y)
>>> list(zipped)
[(1, 4), (2, 5), (3, 6)]
we have:

zip(*[iter(s)]*3)
It is equivalent to:

itr = iter(s)
zip(itr, itr, itr)
it extracts an item from all the three iterators from the list in order. Since all the iterators are the same object, it just groups the list in chunks of 3.

Example:

for part in zip(*[iter('abcdefghi')]*3):
	print(part)
a,b,c,d,e,f,g,h,i  a,b,c,d,e,f,g,h,i  a,b,c,d,e,f,g,h,i
^                    ^                    ^             
      ^                    ^                    ^
            ^                    ^                    ^
Output:

(a,b,c)

(d,e,f)

(g,h,i)

""""

Let me give a shot,

Approach 1 : Simply passing a list

>>>s='abcdefghi'
>>>zip(s, s, s)
[('a', 'a', 'a'), ('b', 'b', 'b'), ('c', 'c', 'c'), ('d', 'd', 'd'), ('e', 'e', 'e'), ('f', 'f', 'f'), ('g', 'g', 'g'), ('h', 'h', 'h'), ('i', 'i', 'i')]
Explaination: Simply combining the elements of the same index. The total number of elements is equal to the length of smallest list. Since list is same 
and has 9 elements, therefore there are 9 tuples.

Approach 2 : Passing an interator of the list

>>>s='abdefghi'
>>>i=iter(s) #iter takes it to the next next, so there wont be repetition like previous example.
>>>zip(i, i, i)
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
Explaination : When passing iterators, zip internally invokes the next on the subsequent passed iterators before combining them. Since here, the
iterator is to the same list. Hence you get such an output. For example,

Output of (a, b, c) comes out like this:

>>next(i) # first iterator passed
a
>>next(i) # second iterator passed
b
>>next(i) # third iterator passed
c
Combine them => (a,b,c)

While generating the second tuple, (d, e, f)

>>next(i) # Again on the fist iterator, last element 'c'
d
>>next(i) # Again on second iterator
e
>>next(i) # Again on third iterator
f


def merge_the_tools(S, N):
    for part in zip(*[iter(S)] * N):
       d = dict()
       #print(''.join([ d.setdefault(c, c) for c in part if c not in d ]))
       for c in part:
           if c not in d:
               k = d.setdefault(c,c) 
               print(k) #
               print(d)
               
               
"""                       
Input (stdin)
AABCAAADA
3
Your Output (stdout)
A
{'A': 'A'}
B
{'A': 'A', 'B': 'B'}
C
{'C': 'C'}
A
{'C': 'C', 'A': 'A'}
A
{'A': 'A'}
D
{'A': 'A', 'D': 'D'}
Expected Output
AB
CA
AD

"""
more examples on zip

Original Code with Unpacking
https://github.com/poramesh/_______python______/blob/main/026.%20stringValidators

print "\n".join([str(any(i)) for i in (list(zip(*[[c.isalnum(), c.isalpha(), c.isdigit(), c.islower(), c.isupper()] for c in raw_input()])))]
What Unpacking Does
The unpacking operator (*) is used to pass all items in a list (or any iterable) as separate arguments to a function. When used with zip,
it transposes the list of lists. Without unpacking, zip will treat the whole list as a single argument.

Example
s = 'a1'
With unpacking (*), the intermediate steps are:

properties = [[c.isalnum(), c.isalpha(), c.isdigit(), c.islower(), c.isupper()] for c in s]

Result:
properties = [
    [True, True, False, True, False],  # for 'a'
    [True, False, True, False, False]  # for '1'
]
Transpose using zip with unpacking:
zipped_properties = list(zip(*properties))

Result:
zipped_properties = [
    (True, True),   # isalnum() results
    (True, False),  # isalpha() results
    (False, True),  # isdigit() results
    (True, False),  # islower() results
    (False, False)  # isupper() results
]
Process each tuple with any:

results = [str(any(i)) for i in zipped_properties]
Result:
results = ["True", "True", "True", "True", "False"]

Without unpacking (*), the zip function will receive a single list argument:

zipped_properties = list(zip(properties))
This treats properties as a single iterable and will not transpose the inner lists:

Generate properties for each character:
properties = [[c.isalnum(), c.isalpha(), c.isdigit(), c.islower(), c.isupper()] for c in s]

Result:
properties = [
    [True, True, False, True, False],  # for 'a'
    [True, False, True, False, False]  # for '1'
]
zip without unpacking:

zipped_properties = list(zip(properties))

Result:
zipped_properties = [
    ([True, True, False, True, False],),  # single tuple containing the first list
    ([True, False, True, False, False],)  # single tuple containing the second list
]
Process each tuple with any:

results = [str(any(i)) for i in zipped_properties]
Here, i is a tuple containing a single list, and any will evaluate it to True because non-empty lists are truthy:
Result:
results = ["True", "True"]

Summary
Without unpacking, zip(properties) does not transpose the list of lists. Instead, it creates a list of tuples, where each tuple 
contains a single list. This results in different, and typically incorrect, behavior for your intended purpose.

Correct Approach
To achieve the intended transposition of the list of lists, you should use the unpacking operator:

