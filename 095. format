Formatting with Different Specifiers

1. Fixed-Point Number (2 decimal places)

number = 1234.5678
formatted_number = "{:.2f}".format(number)
print(formatted_number)  # Output: 1234.57

2. Fixed-Point Number with Comma as Thousand Separator

number = 1234567.89
formatted_number = "{:,.2f}".format(number)
print(formatted_number)  # Output: 1,234,567.89

3. Percentage

number = 0.1234
formatted_number = "{:.2%}".format(number)
print(formatted_number)  # Output: 12.34%

4. Exponential Notation

number = 1234.5678
formatted_number = "{:.2e}".format(number)
print(formatted_number)  # Output: 1.23e+03

5. Aligning Text (Left, Center, Right)

text = "Hello"
print("{:<10}".format(text))  # Left align, width 10: 'Hello     '
print("{:^10}".format(text))  # Center align, width 10: '  Hello   '
print("{:>10}".format(text))  # Right align, width 10: '     Hello'

6. Padding Numbers with Leading Zeros

number = 42
formatted_number = "{:05d}".format(number)
print(formatted_number)  # Output: 00042

7. Binary, Octal, Hexadecimal

number = 42
print("{:b}".format(number))  # Binary: 101010
print("{:o}".format(number))  # Octal: 52
print("{:x}".format(number))  # Hexadecimal: 2a
print("{:X}".format(number))  # Hexadecimal uppercase: 2A

Formatting with f-strings (Python 3.6+)

1.Fixed-Point Number (2 decimal places)

number = 1234.5678
formatted_number = f"{number:.2f}"
print(formatted_number)  # Output: 1234.57

2. Fixed-Point Number with Comma as Thousand Separator

number = 1234567.89
formatted_number = f"{number:,.2f}"
print(formatted_number)  # Output: 1,234,567.89

3. Percentage

number = 0.1234
formatted_number = f"{number:.2%}"
print(formatted_number)  # Output: 12.34%

4. Exponential Notation

number = 1234.5678
formatted_number = f"{number:.2e}"
print(formatted_number)  # Output: 1.23e+03

5. Aligning Text (Left, Center, Right)

text = "Hello"
print(f"{text:<10}")  # Left align, width 10: 'Hello     '
print(f"{text:^10}")  # Center align, width 10: '  Hello   '
print(f"{text:>10}")  # Right align, width 10: '     Hello'

6. Padding Numbers with Leading Zeros

number = 42
formatted_number = f"{number:05d}"
print(formatted_number)  # Output: 00042

7. Binary, Octal, Hexadecimal

number = 42
print(f"{number:b}")  # Binary: 101010
print(f"{number:o}")  # Octal: 52
print(f"{number:x}")  # Hexadecimal: 2a
print(f"{number:X}")  # Hexadecimal uppercase: 2A

8. Advanced Formatting Examples
Dynamic Width and Precision

width = 10
precision = 4
number = 123.456789
formatted_number = f"{number:{width}.{precision}f}"
print(formatted_number)  # Output: '  123.4568' (2 spaces padding)

9. Sign Formatting

number = 42
formatted_number = f"{number:+d}"
print(formatted_number)  # Output: +42
number = -42
formatted_number = f"{number:+d}"
print(formatted_number)  # Output: -42


10. Custom Fill Character

number = 42
formatted_number = f"{number:*>5d}"
print(formatted_number)  # Output: ***42

These examples cover a wide range of formatting options in Python, from simple numeric formatting
to more complex text alignment and custom formatting needs.

STRING FORMATING

Using the format Method
The format method is a powerful way to format strings. You can use placeholders ({}) within the string and pass values to be formatted into
these placeholders.

1. Basic Usage

name = "Alice"
age = 30
formatted_string = "My name is {} and I am {} years old.".format(name, age)
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

2. Positional Arguments

formatted_string = "My name is {0} and I am {1} years old.".format(name, age)
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

3. Keyword Arguments

formatted_string = "My name is {name} and I am {age} years old.".format(name="Alice", age=30)
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

4. Reusing Arguments

formatted_string = "My name is {0} and I am {1} years old. Yes, {0} is my name.".format(name, age)
print(formatted_string)  # Output: My name is Alice and I am 30 years old. Yes, Alice is my name.

Using f-Strings (Python 3.6+)

f-Strings provide a more concise and readable way to format strings.

1. Basic Usage

name = "Alice"
age = 30
formatted_string = f"My name is {name} and I am {age} years old."
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

2. Expressions Inside f-Strings

formatted_string = f"In two years, I will be {age + 2} years old."
print(formatted_string)  # Output: In two years, I will be 32 years old.

3. Calling Functions Inside f-Strings

def greet(name):
    return f"Hello, {name}!"

formatted_string = f"{greet('Alice')}"
print(formatted_string)  # Output: Hello, Alice!


Using the Percent Operator (%)

This is an older method of formatting strings but is still used in some codebases.

1. Basic Usage

name = "Alice"
age = 30
formatted_string = "My name is %s and I am %d years old." % (name, age)
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

2. Formatting Floating-Point Numbers

number = 123.456789
formatted_string = "The number is %.2f." % number
print(formatted_string)  # Output: The number is 123.46.


Using str.format with Advanced Formatting

1. Width and Alignment

name = "Alice"
formatted_string = "My name is {:>10}.".format(name)  # Right align with width 10
print(formatted_string)  # Output: My name is      Alice.

3. Padding with Fill Characters

formatted_string = "My name is {:*^10}.".format(name)  # Center align with width 10 and '*' as fill character
print(formatted_string)  # Output: My name is **Alice***.

4. Formatting Numbers with Thousands Separator

number = 1234567.89
formatted_string = "The number is {:,.2f}.".format(number)
print(formatted_string)  # Output: The number is 1,234,567.89.

String Interpolation with Dictionaries

1. You can use a dictionary to format strings using the format method.

data = {"name": "Alice", "age": 30}
formatted_string = "My name is {name} and I am {age} years old.".format(**data)
print(formatted_string)  # Output: My name is Alice and I am 30 years old.

Summary
Python offers several ways to format strings, each with its own advantages:

format Method: Flexible and powerful, allows positional and keyword arguments.
f-Strings: Concise and readable, suitable for most formatting tasks.
Percent Operator (%): Older method, still useful for simple formatting.
Advanced Formatting with str.format: Allows width, alignment, padding, and numeric formatting.
Dictionary Interpolation: Convenient for formatting strings with data from dictionaries.



number = 12
formatted_string = f"{number}%"
print(formatted_string)  # Output: 12%
