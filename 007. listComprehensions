Task:
""""expalnation in the end""

Let's learn about list comprehensions! 
You are given three integers x, y and z representing the dimensions of a cuboid along with an integer .
Print a list of all possible coordinates given by i,j,k on a 3D grid where the sum of  i+j+k  is not equal to n . 

Here, 0<=i<+x;
0<=j<=y;
0<=k<=z . Please use list comprehensions rather than multiple loops, as a learning exercise.
refer this link for more understanding 
https://www.hackerrank.com/challenges/list-comprehensions/problem?isFullScreen=true

Sample Input 0

1
1
1
2

Sample Output 0

[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]

example of list comphrensions:

Consider a list called 'a' with even and odd numbers. Now suppose you want to create a list 'b' that contains only the even numbers of list 'a'.

One way to do this in the usual way with a loop:

b = []
for n in a:
if n % 2 == 0:
b.append(n)
Using list comprehension this would look like this single line:

b = [n for n in a if n % 2 == 0]



The Syntax
newlist = [expression for item in iterable if condition == True]
The return value is a new list, leaving the old list unchanged.
#x, y, z, n = int(input()), int(input()), int(input()), int(input())

SOLUTION

Tuple: If you have values separated by commas inside parentheses, it's a tuple.
Example: (2, 3, 4) is a tuple.
a,b,c = (2,3,4) it is unpacking the values to the variables

Generator: If you have an expression (like i for i in range(3)) inside parentheses, it creates a generator expression.
Example: (i for i in range(3)) is a generator expression.
var x,y,z = (i for i in range(3))  //unpacking the genertor.

differnce between lsit comphrension and generator:


Feature	                Generator Expression                             	           List/Set/Dict Comprehension
Syntax	        Uses parentheses ()	Uses square brackets [] for lists,                  curly braces {} for sets and dictionaries
Memory Usage	Lazy, memory-efficient; stores only one value at a time	Eager,          stores the entire collection in memory
Evaluation	    Lazy evaluation (values are computed as needed)	                         Eager evaluation (all values are computed upfront)
Performance	    More efficient for large data sets, as it generates values on demand	  Can be less efficient for large data sets, as all values are generated at once
Return Type	    Returns a generator object	                                             Returns a list, set, or dictionary, depending on the comprehension


x,y,z,n = (int(input()) for _ in range(4))

print ([[a,b,c] for a in range(0,x+1) for b in range(0,y+1) for c in range(0,z+1) if a + b + c != n ])
#print ([[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a + b + c != n ])


#_ is used to signify that even though something is being returned, we don't plan to use that variable any where.

(or)

x, y, z, n = (int(input()) for _ in range(4))

# Create an empty list to store the result
result = []

# Iterate over all possible values of a, b, and c within the specified ranges
for a in range(0, x + 1):
    for b in range(0, y + 1):
        for c in range(0, z + 1):
            # Check if the sum of a, b, and c is not equal to n
            if a + b + c != n:
                # If the condition is met, add the triplet [a, b, c] to the result list
                result.append([a, b, c])

# Print the result
print(result)





Java implementaion: 

java

import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int n = scanner.nextInt();

        ArrayList<ArrayList<Integer>> result = new ArrayList<>();

        for (int a = 0; a <= x; a++) {
            for (int b = 0; b <= y; b++) {
                for (int c = 0; c <= z; c++) {
                    if (a + b + c != n) {
                        ArrayList<Integer> triplet = new ArrayList<>();
                        triplet.add(a);
                        triplet.add(b);
                        triplet.add(c);
                        result.add(triplet);
                    }
                }
            }
        }

        System.out.println(result);
    }
}




You are given:

Three integers x, y, and z representing the dimensions of a cuboid. This means the cuboid has:
x units along the x-axis,
y units along the y-axis,
z units along the z-axis.

Another integer n, and you need to print all possible coordinates (i, j, k) where:
i ranges from 0 to x-1,
j ranges from 0 to y-1,
k ranges from 0 to z-1,
and the sum i + j + k is not equal to n.

The possible coordinates are the combinations of these values, 
where 
i ranges from 0 to x-1 (i.e., 0 to 1),
j ranges from 0 to y-1 (i.e., 0 to 1),
and k ranges from 0 to z-1 (i.e., 0 to 1).

All possible coordinates for x = 2, y = 2, z = 2:
(0, 0, 0)
(0, 0, 1)
(0, 1, 0)
(0, 1, 1)
(1, 0, 0)
(1, 0, 1)
(1, 1, 0)
(1, 1, 1)
