In this task, we would like for you to appreciate the usefulness of the groupby() function of itertools.

You are given a string S. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c'
with (X,c in the string.


Input Format

A single line of input consisting of the string S.

Output Format

A single line of output consisting of the modified string.

Constraints

All the characters of S denote integers between 0 and 9.

1<=|S|<=10^4

Sample Input:

1222311

Sample Output:

(1, 1) (3, 2) (1, 3) (2, 1)

Explanation:

First, the character 1 occurs only once. It is replaced by (1,1). Then the character 2 occurs three times, and it is replaced by (3,2) and so on.
Also, note the single space within each compression and between the compressions.

solution:

string=input()
ch=""
count = 1
for i in range(len(string)):
    print(ch)
    ch = string[i]
    if(i + 1 == len(string)):
        print((count, int(ch)), end=" ")
        count=1
        continue
    if ch == string[i+1]:
        count+=1
        continue
    else:
        print((count, int(ch)), end=" ")
        count=1
LOOKS LIKE THIS APPROACH IS OSMETHING I CAME UP WITH> SO ITS SO MSEESSED UP.

(or)
//aaabbc
a=input()
s=''
for i in range(0,len(a)):
    if i!=0:
        print(i)
        if a[i]==a[i-1]:  
            continue
    p=0
    for j in range(i,len(a)):
        print(i)
        if a[i]==a[j]:
            p+=1
        else:
            break
    s+='('+str(p)+', '+a[i]+')'+' '
print(s)

//
7777888996
0
0
0
0
0
1
2
3
4
4
4
4
4
5
6
7
7
7
7
8
9
9
(4, 7) (3, 8) (2, 9) (1, 6) 
(or)

lst = [int(i) for i in input()]
tps = []
prev = lst[0]
count = 0
for item in lst:
    if item == prev:
        count += 1
    else:
        tps.append((count, prev))
        count = 1
        prev = item
tps.append((count, prev))
print(*tps)

(or)
groupby:
Groups consecutive identical elements.
Returns an iterator of pairs: (key, group), where key is the value of the group, and group is an iterator over the consecutive elements.

data = ['a', 'a', 'b', 'b', 'a', 'c', 'c', 'c']
result = groupby(data)
for key, group in result:
    print(f"Key: {key}, Group: {list(group)}")
Key: a, Group: ['a', 'a']
Key: b, Group: ['b', 'b']
Key: a, Group: ['a']
Key: c, Group: ['c', 'c', 'c']

from itertools import *

for i,j in groupby(map(int,list(input()))):
    print(f"({len(list(j))}, {i})", end=' ')

(or)


from itertools import *

for i,j in groupby(map(int,list(raw_input()))):
    print(tuple([len(list(j)), i]) ,end = " ")

(or)

from itertools import groupby
print(*[(len(list(c)), int(k)) for k, c in groupby(input())])
