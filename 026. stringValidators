Python has built-in string validation methods for basic data. It can check if a string is composed of alphabetical characters, alphanumeric characters,
digits, etc.

str.isalnum()
This method checks if all the characters of a string are alphanumeric (a-z, A-Z and 0-9).

>>> print 'ab123'.isalnum()
True
>>> print 'ab123#'.isalnum()
False
str.isalpha()
This method checks if all the characters of a string are alphabetical (a-z and A-Z).

>>> print 'abcD'.isalpha()
True
>>> print 'abcd1'.isalpha()
False
str.isdigit()
This method checks if all the characters of a string are digits (0-9).

>>> print '1234'.isdigit()
True
>>> print '123edsd'.isdigit()
False
str.islower()
This method checks if all the characters of a string are lowercase characters (a-z).

>>> print 'abcd123#'.islower()
True
>>> print 'Abcd123#'.islower()
False
str.isupper()
This method checks if all the characters of a string are uppercase characters (A-Z).

>>> print 'ABCD123#'.isupper()
True
>>> print 'Abcd123#'.isupper()
False



Task

You are given a string S.
Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.

Input Format

A single line containing a string S.

Constraints

0<len(S)<1000


Output Format

In the first line, print True if S has any alphanumeric characters. Otherwise, print False.
In the second line, print True if S has any alphabetical characters. Otherwise, print False.
In the third line, print True if S has any digits. Otherwise, print False.
In the fourth line, print True if S has any lowercase characters. Otherwise, print False.
In the fifth line, print True if S has any uppercase characters. Otherwise, print False.

Sample Input

qA2
Sample Output

True
True
True
True
True


Solution:

if __name__ == '__main__':
    S = input()
    
    
print(any(i.isalnum() for i in S))
print(any(i.isalpha() for i in S))
print(any(i.isdigit() for i in S))
print(any(i.islower() for i in S))
print(any(i.isupper() for i in S))

(or)

string = raw_input()
l=list(string)
a,b,c,d,e=False,False,False,False,False
for i in l:
    if i.isalnum():
        a=True
    if i.isalpha():
        b=True
    if i.isdigit():
        c=True
    if i.islower():
        d=True
    if i.isupper():
        e=True
print a
print b
print c
print d
print e

(or)

for test in ('isalnum', 'isalpha', 'isdigit', 'islower', 'isupper'):
       print( any(eval("c." + test + "()") for c in s))

(or)



for method in [str.isalnum, str.isalpha, str.isdigit, str.islower, str.isupper]:
    print any(method(c) for c in s)

print(method)
<method 'isdigit' of 'str' objects>

(or)

t = type(s)
for method in [t.isalnum, t.isalpha, t.isdigit, t.islower, t.isupper]:
    print any(method(c) for c in s)

print(method)
<method 'isalnum' of 'str' objects>

(or)

Done in a single line :P

# uses all five string methods on each character in input string
# prints True if at least one character made the method return True
print "\n".join([str(any(i)) for i in (list(zip(*[[c.isalnum(), c.isalpha(), c.isdigit(), c.islower(), c.isupper()] for c in raw_input()])))])
or a little less cluttered (perhaps):

# user input
s = raw_input()

# uses all 5 methods on each character and creates a list for each,
# containing the results of each method used on the character.
newList = [[c.isalnum(), c.isalpha(), c.isdigit(), c.islower(), c.isupper()] for c in s]

# rotates lists clockwise to get lists of each method instead
rotated = list(zip(*newList))

# prints whether or not a True is present for each List
print "\n".join([str(any(i)) for i in rotated])
Example to clarify:

stdin: P12A
s = P12A

# each method is used on each character
newList = [[True, True, False, False, True ] # methods used on P
           [True, False, True, False, False] # methods used on 1
           [True, False, True, False, False] # methods used on 2
           [True, True, False, False, True]] # methods used on A

# rotates clockwise to get lists of methods' returned values
rotated = [[True,  True,  True,  True ] # results for .isalnum()
           [True,  False, False, True ] # results for .isalpha()
           [False, True,  True,  False] # results for .isdigit()
           [False, False, False, False] # results for .islower()
           [True,  False, False, True]] # results for .isupper()

# prints whether or not a True is present for each list
stdout:
True
True
True
False
True
Just a fun and different solution :)

***************
zip(*[
    [True, True, False, True, False],
    [True, False, True, False, False]
])
The result will be:

python
Copy code
[
    (True, True),    # isalnum() results
    (True, False),   # isalpha() results
    (False, True),   # isdigit() results
    (True, False),   # islower() results
    (False, False)   # isupper() results
]
List Comprehension and any Function:
[str(any(i)) for i in ...]
**************
more on get_atrr

class MyClass:
    def __init__(self):
        self.name = "Alice"
        self.age = 30
    
    def greet(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

    def is_adult(self):
        return self.age >= 18

# Create an instance of MyClass
obj = MyClass()

# List of method and attribute names as strings
attributes = ['name', 'age', 'greet', 'is_adult']

# Iterate over each attribute name
for attr_name in attributes:
    # Use getattr to get the attribute from the object
    attr = getattr(obj, attr_name)
    # If the attribute is callable (a method), call it
    if callable(attr):
        print(f"{attr_name}(): {attr()}")
    else:
        print(f"{attr_name}: {attr}")

o/p
name: Alice
age: 30
greet(): Hello, my name is Alice and I am 30 years old.
is_adult(): True


s = 'asdas2'

# List of method names as strings
methods = ['isalnum', 'isalpha', 'isdigit', 'islower', 'isupper']

# Iterate over each method name
for method_name in methods:
    # Use getattr to get the method from the string object
    methd = getattr(s, method_name)
    print(methd)
    # Apply the method to the string object and print the result
    print(methd())
    
<built-in method isalnum of str object at 0x7b7df32ae830>
True
<built-in method isalpha of str object at 0x7b7df32ae830>
False
<built-in method isdigit of str object at 0x7b7df32ae830>
False
<built-in method islower of str object at 0x7b7df32ae830>
True
<built-in method isupper of str object at 0x7b7df32ae830>
False

